#pragma checksum "G:\GrandMaisonHRG\Tools\src\GMTool\GMCommandTool.xaml" "{8829d00f-11b8-4213-878b-770e8597ac16}" "C91E29C87051069F9594702F1A56785A94E53E6BBA4D9F4367E6BA42390B8849"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GMTool
{
    partial class GMCommandTool : 
        global::Microsoft.UI.Xaml.Controls.Page, 
        global::Microsoft.UI.Xaml.Markup.IComponentConnector
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private static class XamlBindingSetters
        {
            public static void Set_Microsoft_UI_Xaml_Controls_TeachingTip_Target(global::Microsoft.UI.Xaml.Controls.TeachingTip obj, global::Microsoft.UI.Xaml.FrameworkElement value, string targetNullValue)
            {
                if (value == null && targetNullValue != null)
                {
                    value = (global::Microsoft.UI.Xaml.FrameworkElement) global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.ConvertValue(typeof(global::Microsoft.UI.Xaml.FrameworkElement), targetNullValue);
                }
                obj.Target = value;
            }
            public static void Set_Microsoft_UI_Xaml_UIElement_Visibility(global::Microsoft.UI.Xaml.UIElement obj, global::Microsoft.UI.Xaml.Visibility value)
            {
                obj.Visibility = value;
            }
        };

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private class GMCommandTool_obj1_Bindings :
            global::Microsoft.UI.Xaml.Markup.IDataTemplateComponent,
            global::Microsoft.UI.Xaml.Markup.IXamlBindScopeDiagnostics,
            global::Microsoft.UI.Xaml.Markup.IComponentConnector,
            IGMCommandTool_Bindings
        {
            private global::GMTool.GMCommandTool dataRoot;
            private bool initialized = false;
            private const int NOT_PHASED = (1 << 31);
            private const int DATA_CHANGED = (1 << 30);

            // Fields for each control that has bindings.
            private global::Microsoft.UI.Xaml.Controls.TeachingTip obj15;
            private global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem obj17;
            private global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem obj19;

            // Static fields for each binding's enabled/disabled state
            private static bool isobj15TargetDisabled = false;
            private static bool isobj17VisibilityDisabled = false;
            private static bool isobj19VisibilityDisabled = false;

            public GMCommandTool_obj1_Bindings()
            {
            }

            public void Disable(int lineNumber, int columnNumber)
            {
                if (lineNumber == 107 && columnNumber == 47)
                {
                    isobj15TargetDisabled = true;
                }
                else if (lineNumber == 82 && columnNumber == 54)
                {
                    isobj17VisibilityDisabled = true;
                }
                else if (lineNumber == 93 && columnNumber == 49)
                {
                    isobj19VisibilityDisabled = true;
                }
            }

            // IComponentConnector

            public void Connect(int connectionId, global::System.Object target)
            {
                switch(connectionId)
                {
                    case 15: // GMCommandTool.xaml line 107
                        this.obj15 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                        break;
                    case 17: // GMCommandTool.xaml line 82
                        this.obj17 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem>(target);
                        break;
                    case 19: // GMCommandTool.xaml line 93
                        this.obj19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                        break;
                    default:
                        break;
                }
            }
                        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
                        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
                        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target) 
                        {
                            return null;
                        }

            // IDataTemplateComponent

            public void ProcessBindings(global::System.Object item, int itemIndex, int phase, out int nextPhase)
            {
                nextPhase = -1;
            }

            public void Recycle()
            {
                return;
            }

            // IGMCommandTool_Bindings

            public void Initialize()
            {
                if (!this.initialized)
                {
                    this.Update();
                }
            }
            
            public void Update()
            {
                this.Update_(this.dataRoot, NOT_PHASED);
                this.initialized = true;
            }

            public void StopTracking()
            {
            }

            public void DisconnectUnloadedObject(int connectionId)
            {
                throw new global::System.ArgumentException("No unloadable elements to disconnect.");
            }

            public bool SetDataRoot(global::System.Object newDataRoot)
            {
                if (newDataRoot != null)
                {
                    this.dataRoot = global::WinRT.CastExtensions.As<global::GMTool.GMCommandTool>(newDataRoot);
                    return true;
                }
                return false;
            }

            public void Activated(object obj, global::Microsoft.UI.Xaml.WindowActivatedEventArgs data)
            {
                this.Initialize();
            }

            public void Loading(global::Microsoft.UI.Xaml.FrameworkElement src, object data)
            {
                this.Initialize();
            }

            // Update methods for each path node used in binding steps.
            private void Update_(global::GMTool.GMCommandTool obj, int phase)
            {
                if (obj != null)
                {
                    if ((phase & (NOT_PHASED | (1 << 0))) != 0)
                    {
                        this.Update_BtnResetPlayer(obj.BtnResetPlayer, phase);
                        this.Update_PrivilegeVisibility(obj.PrivilegeVisibility, phase);
                    }
                }
            }
            private void Update_BtnResetPlayer(global::Microsoft.UI.Xaml.Controls.SplitButton obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // GMCommandTool.xaml line 107
                    if (!isobj15TargetDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_Controls_TeachingTip_Target(this.obj15, obj, null);
                    }
                }
            }
            private void Update_PrivilegeVisibility(global::Microsoft.UI.Xaml.Visibility obj, int phase)
            {
                if ((phase & ((1 << 0) | NOT_PHASED )) != 0)
                {
                    // GMCommandTool.xaml line 82
                    if (!isobj17VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj17, obj);
                    }
                    // GMCommandTool.xaml line 93
                    if (!isobj19VisibilityDisabled)
                    {
                        XamlBindingSetters.Set_Microsoft_UI_Xaml_UIElement_Visibility(this.obj19, obj);
                    }
                }
            }
        }

        /// <summary>
        /// Connect()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public void Connect(int connectionId, object target)
        {
            switch(connectionId)
            {
            case 2: // GMCommandTool.xaml line 10
                {
                    this.Root = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 3: // GMCommandTool.xaml line 138
                {
                    this.GridParams = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Grid>(target);
                }
                break;
            case 4: // GMCommandTool.xaml line 140
                {
                    this.TextBlockNoParams = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBlock>(target);
                }
                break;
            case 5: // GMCommandTool.xaml line 154
                {
                    this.HistoryListView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.HistoryListView).SelectionChanged += this.HistoryListView_OnSelectionChanged;
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.HistoryListView).ContainerContentChanging += this.HistoryListView_ContainerContentChanging;
                }
                break;
            case 7: // GMCommandTool.xaml line 149
                {
                    this.BtnClearHistory = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.BtnClearHistory).Click += this.BtnClearHistory_OnClick;
                }
                break;
            case 8: // GMCommandTool.xaml line 143
                {
                    this.TextFinalCommand = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TextBox)this.TextFinalCommand).TextChanged += this.TextBox_OnTextChanged;
                    ((global::Microsoft.UI.Xaml.Controls.TextBox)this.TextFinalCommand).KeyUp += this.TextFinalCommand_OnKeyUp;
                }
                break;
            case 9: // GMCommandTool.xaml line 144
                {
                    this.BtnSend = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.BtnSend).Click += this.BtnSend_OnClick;
                }
                break;
            case 10: // GMCommandTool.xaml line 122
                {
                    this.SelectorTypes = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.SelectorTypes).SelectionChanged += this.SelectorTypes_OnSelectionChanged;
                }
                break;
            case 11: // GMCommandTool.xaml line 129
                {
                    this.SelectorCommands = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ComboBox)this.SelectorCommands).SelectionChanged += this.SelectorCommands_OnSelectionChanged;
                }
                break;
            case 14: // GMCommandTool.xaml line 79
                {
                    this.BtnResetPlayer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.SplitButton>(target);
                    ((global::Microsoft.UI.Xaml.Controls.SplitButton)this.BtnResetPlayer).Click += this.FillPID_OnClick;
                }
                break;
            case 15: // GMCommandTool.xaml line 107
                {
                    this.tipEditPlayerID = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TeachingTip>(target);
                    ((global::Microsoft.UI.Xaml.Controls.TeachingTip)this.tipEditPlayerID).ActionButtonClick += this.BtnEditPlayerIDConfirm_OnClick;
                }
                break;
            case 16: // GMCommandTool.xaml line 110
                {
                    this.tbEditPlayerID = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.TextBox>(target);
                }
                break;
            case 17: // GMCommandTool.xaml line 82
                {
                    global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem element17 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ToggleMenuFlyoutItem)element17).Click += this.AutoFillPID_Click;
                }
                break;
            case 18: // GMCommandTool.xaml line 88
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element18 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element18).Click += this.BtnEditPlayerID_OnClick;
                }
                break;
            case 19: // GMCommandTool.xaml line 93
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element19 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element19).Click += this.BtnResetPlayer_OnClick;
                }
                break;
            case 20: // GMCommandTool.xaml line 98
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element20 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element20).Click += this.BtnCopyPlayerID_OnClick;
                }
                break;
            case 21: // GMCommandTool.xaml line 48
                {
                    this.ServersListView = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ListView>(target);
                    ((global::Microsoft.UI.Xaml.Controls.ListView)this.ServersListView).SelectionChanged += this.ServersListView_OnSelectionChanged;
                }
                break;
            case 23: // GMCommandTool.xaml line 54
                {
                    global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem element23 = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem>(target);
                    ((global::Microsoft.UI.Xaml.Controls.MenuFlyoutItem)element23).Click += this.MenuFlyoutItemSelectAll_OnClick;
                }
                break;
            case 24: // GMCommandTool.xaml line 40
                {
                    this.cbEnvSelect = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.ComboBox>(target);
                }
                break;
            case 26: // GMCommandTool.xaml line 36
                {
                    this.BtnResetServer = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.Button>(target);
                    ((global::Microsoft.UI.Xaml.Controls.Button)this.BtnResetServer).Click += this.ResetDefaultServerId;
                }
                break;
            case 27: // GMCommandTool.xaml line 19
                {
                    this.TopInfoBar = global::WinRT.CastExtensions.As<global::Microsoft.UI.Xaml.Controls.InfoBar>(target);
                }
                break;
            default:
                break;
            }
            this._contentLoaded = true;
        }

        /// <summary>
        /// GetBindingConnector(int connectionId, object target)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(int connectionId, object target)
        {
            global::Microsoft.UI.Xaml.Markup.IComponentConnector returnValue = null;
            switch(connectionId)
            {
            case 1: // GMCommandTool.xaml line 1
                {                    
                    global::Microsoft.UI.Xaml.Controls.Page element1 = (global::Microsoft.UI.Xaml.Controls.Page)target;
                    GMCommandTool_obj1_Bindings bindings = new GMCommandTool_obj1_Bindings();
                    returnValue = bindings;
                    bindings.SetDataRoot(this);
                    this.Bindings = bindings;
                    element1.Loading += bindings.Loading;
                    global::Microsoft.UI.Xaml.Markup.XamlBindingHelper.SetDataTemplateComponent(element1, bindings);
                }
                break;
            }
            return returnValue;
        }
    }
}

