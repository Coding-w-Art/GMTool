//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


namespace GMTool
{
    public partial class App : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        private global::GMTool.GMTool_XamlTypeInfo.XamlMetaDataProvider __appProvider;

        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::GMTool.GMTool_XamlTypeInfo.XamlMetaDataProvider _AppProvider
        {
            get
            {
                if (__appProvider == null)
                {
                    __appProvider = new global::GMTool.GMTool_XamlTypeInfo.XamlMetaDataProvider();
                }
                return __appProvider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return _AppProvider.GetXamlType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return _AppProvider.GetXamlType(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return _AppProvider.GetXmlnsDefinitions();
        }
    }
}

namespace GMTool.GMTool_XamlTypeInfo
{
    /// <summary>
    /// Main class for providing metadata for the app or library
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed class XamlMetaDataProvider : global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::GMTool.GMTool_XamlTypeInfo.XamlTypeInfoProvider _provider = null;

        private global::GMTool.GMTool_XamlTypeInfo.XamlTypeInfoProvider Provider
        {
            get
            {
                if (_provider == null)
                {
                    _provider = new global::GMTool.GMTool_XamlTypeInfo.XamlTypeInfoProvider();
                }
                return _provider;
            }
        }

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        [global::Windows.Foundation.Metadata.DefaultOverload]
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            return Provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            return Provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Microsoft.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType) 
            { 
                if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByType(type);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::GMTool.GMTool_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType;
            lock (_xamlTypeCacheByType)
            {
                if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
                {
                    return xamlType;
                }
                int typeIndex = LookupTypeIndexByName(typeName);
                if(typeIndex != -1)
                {
                    xamlType = CreateXamlType(typeIndex);
                }
                var userXamlType = xamlType as global::GMTool.GMTool_XamlTypeInfo.XamlUserType;
                if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
                {
                    global::Microsoft.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                    if (libXamlType != null)
                    {
                        if(libXamlType.IsConstructible || xamlType == null)
                        {
                            xamlType = libXamlType;
                        }
                    }
                }
                if (xamlType != null)
                {
                    _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                    _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
                }
            }
            return xamlType;
        }

        public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Microsoft.UI.Xaml.Markup.IXamlMember xamlMember;
            lock (_xamlMembers)
            {
                if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
                {
                    return xamlMember;
                }
                xamlMember = CreateXamlMember(longMemberName);
                if (xamlMember != null)
                {
                    _xamlMembers.Add(longMemberName, xamlMember);
                }
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Microsoft.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Microsoft.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[101];
            _typeNameTable[0] = "Microsoft.UI.Xaml.Controls.XamlControlsResources";
            _typeNameTable[1] = "Microsoft.UI.Xaml.ResourceDictionary";
            _typeNameTable[2] = "Object";
            _typeNameTable[3] = "Boolean";
            _typeNameTable[4] = "Microsoft.UI.Xaml.Controls.ProgressRing";
            _typeNameTable[5] = "Microsoft.UI.Xaml.Controls.Control";
            _typeNameTable[6] = "Double";
            _typeNameTable[7] = "Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings";
            _typeNameTable[8] = "Microsoft.UI.Xaml.DependencyObject";
            _typeNameTable[9] = "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock";
            _typeNameTable[10] = "Microsoft.UI.Xaml.Media.FontFamily";
            _typeNameTable[11] = "Microsoft.UI.Xaml.Media.Brush";
            _typeNameTable[12] = "Windows.UI.Text.FontWeight";
            _typeNameTable[13] = "System.ValueType";
            _typeNameTable[14] = "String";
            _typeNameTable[15] = "Microsoft.UI.Xaml.TextWrapping";
            _typeNameTable[16] = "Microsoft.UI.Xaml.Media.Stretch";
            _typeNameTable[17] = "Microsoft.UI.Xaml.Thickness";
            _typeNameTable[18] = "Int32";
            _typeNameTable[19] = "ColorCode.Styling.StyleDictionary";
            _typeNameTable[20] = "System.Collections.ObjectModel.KeyedCollection`2<String, ColorCode.Styling.Style>";
            _typeNameTable[21] = "System.Collections.ObjectModel.Collection`1<ColorCode.Styling.Style>";
            _typeNameTable[22] = "ColorCode.Styling.Style";
            _typeNameTable[23] = "GMTool.ChatBot";
            _typeNameTable[24] = "Microsoft.UI.Xaml.Controls.Page";
            _typeNameTable[25] = "Microsoft.UI.Xaml.Controls.UserControl";
            _typeNameTable[26] = "Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator";
            _typeNameTable[27] = "Microsoft.UI.Xaml.Controls.NavigationViewItemBase";
            _typeNameTable[28] = "Microsoft.UI.Xaml.Controls.ContentControl";
            _typeNameTable[29] = "Microsoft.UI.Xaml.Controls.NumberBox";
            _typeNameTable[30] = "Microsoft.UI.Xaml.DataTemplate";
            _typeNameTable[31] = "Windows.Globalization.NumberFormatting.INumberFormatter2";
            _typeNameTable[32] = "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase";
            _typeNameTable[33] = "Microsoft.UI.Xaml.Media.SolidColorBrush";
            _typeNameTable[34] = "Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode";
            _typeNameTable[35] = "System.Enum";
            _typeNameTable[36] = "Microsoft.UI.Xaml.TextReadingOrder";
            _typeNameTable[37] = "Microsoft.UI.Xaml.Controls.NumberBoxValidationMode";
            _typeNameTable[38] = "GMTool.ConditionEditor";
            _typeNameTable[39] = "GMTool.DiffViewer";
            _typeNameTable[40] = "Microsoft.UI.Xaml.Controls.SplitButton";
            _typeNameTable[41] = "System.Windows.Input.ICommand";
            _typeNameTable[42] = "Microsoft.UI.Xaml.Controls.TeachingTip";
            _typeNameTable[43] = "Microsoft.UI.Xaml.FrameworkElement";
            _typeNameTable[44] = "Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode";
            _typeNameTable[45] = "Microsoft.UI.Xaml.Style";
            _typeNameTable[46] = "Microsoft.UI.Xaml.UIElement";
            _typeNameTable[47] = "Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode";
            _typeNameTable[48] = "Microsoft.UI.Xaml.Controls.IconSource";
            _typeNameTable[49] = "Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility";
            _typeNameTable[50] = "Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings";
            _typeNameTable[51] = "Microsoft.UI.Xaml.Controls.InfoBar";
            _typeNameTable[52] = "Microsoft.UI.Xaml.Controls.InfoBarSeverity";
            _typeNameTable[53] = "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase";
            _typeNameTable[54] = "Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings";
            _typeNameTable[55] = "GMTool.GMCommandTool";
            _typeNameTable[56] = "GMTool.HomePage";
            _typeNameTable[57] = "GMTool.LanguageSearchTool";
            _typeNameTable[58] = "Microsoft.UI.Xaml.Controls.Expander";
            _typeNameTable[59] = "Microsoft.UI.Xaml.Controls.ExpandDirection";
            _typeNameTable[60] = "Microsoft.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[61] = "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings";
            _typeNameTable[62] = "GMTool.LogcatTool";
            _typeNameTable[63] = "WinUIEx.WindowEx";
            _typeNameTable[64] = "Microsoft.UI.Xaml.Window";
            _typeNameTable[65] = "WinUIEx.Icon";
            _typeNameTable[66] = "Microsoft.UI.Windowing.AppWindow";
            _typeNameTable[67] = "WinUIEx.WindowState";
            _typeNameTable[68] = "Microsoft.UI.Windowing.AppWindowPresenter";
            _typeNameTable[69] = "Microsoft.UI.Windowing.AppWindowPresenterKind";
            _typeNameTable[70] = "WinUIEx.SystemBackdrop";
            _typeNameTable[71] = "Microsoft.UI.Xaml.Controls.NavigationView";
            _typeNameTable[72] = "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode";
            _typeNameTable[73] = "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible";
            _typeNameTable[74] = "System.Collections.Generic.IList`1<Object>";
            _typeNameTable[75] = "Microsoft.UI.Xaml.Controls.AutoSuggestBox";
            _typeNameTable[76] = "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode";
            _typeNameTable[77] = "Microsoft.UI.Xaml.Controls.StyleSelector";
            _typeNameTable[78] = "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode";
            _typeNameTable[79] = "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus";
            _typeNameTable[80] = "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled";
            _typeNameTable[81] = "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings";
            _typeNameTable[82] = "Microsoft.UI.Xaml.Controls.NavigationViewItem";
            _typeNameTable[83] = "Microsoft.UI.Xaml.Controls.IconElement";
            _typeNameTable[84] = "Microsoft.UI.Xaml.Controls.InfoBadge";
            _typeNameTable[85] = "Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings";
            _typeNameTable[86] = "GMTool.MainWindow";
            _typeNameTable[87] = "CommunityToolkit.WinUI.Controls.Segmented";
            _typeNameTable[88] = "Microsoft.UI.Xaml.Controls.ListViewBase";
            _typeNameTable[89] = "Microsoft.UI.Xaml.Controls.ItemsControl";
            _typeNameTable[90] = "CommunityToolkit.WinUI.Controls.SegmentedItem";
            _typeNameTable[91] = "Microsoft.UI.Xaml.Controls.ListViewItem";
            _typeNameTable[92] = "GMTool.PackageViewer";
            _typeNameTable[93] = "GMTool.PlayerTransfer";
            _typeNameTable[94] = "GMTool.ResourceCheckTool";
            _typeNameTable[95] = "Microsoft.UI.Xaml.Controls.RadioButtons";
            _typeNameTable[96] = "GMTool.Settings";
            _typeNameTable[97] = "GMTool.TimeConverter";
            _typeNameTable[98] = "GMTool.View.ExcelLockMgr";
            _typeNameTable[99] = "Microsoft.UI.Xaml.Controls.TreeViewNode";
            _typeNameTable[100] = "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>";

            _typeTable = new global::System.Type[101];
            _typeTable[0] = typeof(global::Microsoft.UI.Xaml.Controls.XamlControlsResources);
            _typeTable[1] = typeof(global::Microsoft.UI.Xaml.ResourceDictionary);
            _typeTable[2] = typeof(global::System.Object);
            _typeTable[3] = typeof(global::System.Boolean);
            _typeTable[4] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressRing);
            _typeTable[5] = typeof(global::Microsoft.UI.Xaml.Controls.Control);
            _typeTable[6] = typeof(global::System.Double);
            _typeTable[7] = typeof(global::Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings);
            _typeTable[8] = typeof(global::Microsoft.UI.Xaml.DependencyObject);
            _typeTable[9] = typeof(global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock);
            _typeTable[10] = typeof(global::Microsoft.UI.Xaml.Media.FontFamily);
            _typeTable[11] = typeof(global::Microsoft.UI.Xaml.Media.Brush);
            _typeTable[12] = typeof(global::Windows.UI.Text.FontWeight);
            _typeTable[13] = typeof(global::System.ValueType);
            _typeTable[14] = typeof(global::System.String);
            _typeTable[15] = typeof(global::Microsoft.UI.Xaml.TextWrapping);
            _typeTable[16] = typeof(global::Microsoft.UI.Xaml.Media.Stretch);
            _typeTable[17] = typeof(global::Microsoft.UI.Xaml.Thickness);
            _typeTable[18] = typeof(global::System.Int32);
            _typeTable[19] = typeof(global::ColorCode.Styling.StyleDictionary);
            _typeTable[20] = typeof(global::System.Collections.ObjectModel.KeyedCollection<global::System.String, global::ColorCode.Styling.Style>);
            _typeTable[21] = typeof(global::System.Collections.ObjectModel.Collection<global::ColorCode.Styling.Style>);
            _typeTable[22] = typeof(global::ColorCode.Styling.Style);
            _typeTable[23] = typeof(global::GMTool.ChatBot);
            _typeTable[24] = typeof(global::Microsoft.UI.Xaml.Controls.Page);
            _typeTable[25] = typeof(global::Microsoft.UI.Xaml.Controls.UserControl);
            _typeTable[26] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator);
            _typeTable[27] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase);
            _typeTable[28] = typeof(global::Microsoft.UI.Xaml.Controls.ContentControl);
            _typeTable[29] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBox);
            _typeTable[30] = typeof(global::Microsoft.UI.Xaml.DataTemplate);
            _typeTable[31] = typeof(global::Windows.Globalization.NumberFormatting.INumberFormatter2);
            _typeTable[32] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase);
            _typeTable[33] = typeof(global::Microsoft.UI.Xaml.Media.SolidColorBrush);
            _typeTable[34] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode);
            _typeTable[35] = typeof(global::System.Enum);
            _typeTable[36] = typeof(global::Microsoft.UI.Xaml.TextReadingOrder);
            _typeTable[37] = typeof(global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode);
            _typeTable[38] = typeof(global::GMTool.ConditionEditor);
            _typeTable[39] = typeof(global::GMTool.DiffViewer);
            _typeTable[40] = typeof(global::Microsoft.UI.Xaml.Controls.SplitButton);
            _typeTable[41] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[42] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTip);
            _typeTable[43] = typeof(global::Microsoft.UI.Xaml.FrameworkElement);
            _typeTable[44] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode);
            _typeTable[45] = typeof(global::Microsoft.UI.Xaml.Style);
            _typeTable[46] = typeof(global::Microsoft.UI.Xaml.UIElement);
            _typeTable[47] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode);
            _typeTable[48] = typeof(global::Microsoft.UI.Xaml.Controls.IconSource);
            _typeTable[49] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility);
            _typeTable[50] = typeof(global::Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings);
            _typeTable[51] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBar);
            _typeTable[52] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBarSeverity);
            _typeTable[53] = typeof(global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase);
            _typeTable[54] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings);
            _typeTable[55] = typeof(global::GMTool.GMCommandTool);
            _typeTable[56] = typeof(global::GMTool.HomePage);
            _typeTable[57] = typeof(global::GMTool.LanguageSearchTool);
            _typeTable[58] = typeof(global::Microsoft.UI.Xaml.Controls.Expander);
            _typeTable[59] = typeof(global::Microsoft.UI.Xaml.Controls.ExpandDirection);
            _typeTable[60] = typeof(global::Microsoft.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[61] = typeof(global::Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings);
            _typeTable[62] = typeof(global::GMTool.LogcatTool);
            _typeTable[63] = typeof(global::WinUIEx.WindowEx);
            _typeTable[64] = typeof(global::Microsoft.UI.Xaml.Window);
            _typeTable[65] = typeof(global::WinUIEx.Icon);
            _typeTable[66] = typeof(global::Microsoft.UI.Windowing.AppWindow);
            _typeTable[67] = typeof(global::WinUIEx.WindowState);
            _typeTable[68] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenter);
            _typeTable[69] = typeof(global::Microsoft.UI.Windowing.AppWindowPresenterKind);
#pragma warning disable 0618  //   Warning on Deprecated usage
            _typeTable[70] = typeof(global::WinUIEx.SystemBackdrop);
#pragma warning restore 0618
            _typeTable[71] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationView);
            _typeTable[72] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode);
            _typeTable[73] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible);
            _typeTable[74] = typeof(global::System.Collections.Generic.IList<global::System.Object>);
            _typeTable[75] = typeof(global::Microsoft.UI.Xaml.Controls.AutoSuggestBox);
            _typeTable[76] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode);
            _typeTable[77] = typeof(global::Microsoft.UI.Xaml.Controls.StyleSelector);
            _typeTable[78] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode);
            _typeTable[79] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus);
            _typeTable[80] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled);
            _typeTable[81] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings);
            _typeTable[82] = typeof(global::Microsoft.UI.Xaml.Controls.NavigationViewItem);
            _typeTable[83] = typeof(global::Microsoft.UI.Xaml.Controls.IconElement);
            _typeTable[84] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBadge);
            _typeTable[85] = typeof(global::Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings);
            _typeTable[86] = typeof(global::GMTool.MainWindow);
            _typeTable[87] = typeof(global::CommunityToolkit.WinUI.Controls.Segmented);
            _typeTable[88] = typeof(global::Microsoft.UI.Xaml.Controls.ListViewBase);
            _typeTable[89] = typeof(global::Microsoft.UI.Xaml.Controls.ItemsControl);
            _typeTable[90] = typeof(global::CommunityToolkit.WinUI.Controls.SegmentedItem);
            _typeTable[91] = typeof(global::Microsoft.UI.Xaml.Controls.ListViewItem);
            _typeTable[92] = typeof(global::GMTool.PackageViewer);
            _typeTable[93] = typeof(global::GMTool.PlayerTransfer);
            _typeTable[94] = typeof(global::GMTool.ResourceCheckTool);
            _typeTable[95] = typeof(global::Microsoft.UI.Xaml.Controls.RadioButtons);
            _typeTable[96] = typeof(global::GMTool.Settings);
            _typeTable[97] = typeof(global::GMTool.TimeConverter);
            _typeTable[98] = typeof(global::GMTool.View.ExcelLockMgr);
            _typeTable[99] = typeof(global::Microsoft.UI.Xaml.Controls.TreeViewNode);
            _typeTable[100] = typeof(global::System.Collections.Generic.IList<global::Microsoft.UI.Xaml.Controls.TreeViewNode>);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_XamlControlsResources() { return new global::Microsoft.UI.Xaml.Controls.XamlControlsResources(); }
        private object Activate_4_ProgressRing() { return new global::Microsoft.UI.Xaml.Controls.ProgressRing(); }
        private object Activate_9_MarkdownTextBlock() { return new global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock(); }
        private object Activate_19_StyleDictionary() { return new global::ColorCode.Styling.StyleDictionary(); }
        private object Activate_21_Collection() { return new global::System.Collections.ObjectModel.Collection<global::ColorCode.Styling.Style>(); }
        private object Activate_23_ChatBot() { return new global::GMTool.ChatBot(); }
        private object Activate_26_NavigationViewItemSeparator() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator(); }
        private object Activate_29_NumberBox() { return new global::Microsoft.UI.Xaml.Controls.NumberBox(); }
        private object Activate_38_ConditionEditor() { return new global::GMTool.ConditionEditor(); }
        private object Activate_39_DiffViewer() { return new global::GMTool.DiffViewer(); }
        private object Activate_40_SplitButton() { return new global::Microsoft.UI.Xaml.Controls.SplitButton(); }
        private object Activate_42_TeachingTip() { return new global::Microsoft.UI.Xaml.Controls.TeachingTip(); }
        private object Activate_50_TeachingTipTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings(); }
        private object Activate_51_InfoBar() { return new global::Microsoft.UI.Xaml.Controls.InfoBar(); }
        private object Activate_54_InfoBarTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings(); }
        private object Activate_55_GMCommandTool() { return new global::GMTool.GMCommandTool(); }
        private object Activate_56_HomePage() { return new global::GMTool.HomePage(); }
        private object Activate_57_LanguageSearchTool() { return new global::GMTool.LanguageSearchTool(); }
        private object Activate_58_Expander() { return new global::Microsoft.UI.Xaml.Controls.Expander(); }
        private object Activate_62_LogcatTool() { return new global::GMTool.LogcatTool(); }
        private object Activate_63_WindowEx() { return new global::WinUIEx.WindowEx(); }
        private object Activate_71_NavigationView() { return new global::Microsoft.UI.Xaml.Controls.NavigationView(); }
        private object Activate_81_NavigationViewTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings(); }
        private object Activate_82_NavigationViewItem() { return new global::Microsoft.UI.Xaml.Controls.NavigationViewItem(); }
        private object Activate_84_InfoBadge() { return new global::Microsoft.UI.Xaml.Controls.InfoBadge(); }
        private object Activate_85_InfoBadgeTemplateSettings() { return new global::Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings(); }
        private object Activate_86_MainWindow() { return new global::GMTool.MainWindow(); }
        private object Activate_87_Segmented() { return new global::CommunityToolkit.WinUI.Controls.Segmented(); }
        private object Activate_90_SegmentedItem() { return new global::CommunityToolkit.WinUI.Controls.SegmentedItem(); }
        private object Activate_92_PackageViewer() { return new global::GMTool.PackageViewer(); }
        private object Activate_93_PlayerTransfer() { return new global::GMTool.PlayerTransfer(); }
        private object Activate_94_ResourceCheckTool() { return new global::GMTool.ResourceCheckTool(); }
        private object Activate_95_RadioButtons() { return new global::Microsoft.UI.Xaml.Controls.RadioButtons(); }
        private object Activate_96_Settings() { return new global::GMTool.Settings(); }
        private object Activate_97_TimeConverter() { return new global::GMTool.TimeConverter(); }
        private object Activate_98_ExcelLockMgr() { return new global::GMTool.View.ExcelLockMgr(); }
        private object Activate_99_TreeViewNode() { return new global::Microsoft.UI.Xaml.Controls.TreeViewNode(); }
        private void MapAdd_0_XamlControlsResources(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.Object, global::System.Object>)instance;
            var newKey = (global::System.Object)key;
            var newItem = (global::System.Object)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_19_StyleDictionary(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ColorCode.Styling.Style>)instance;
            var newItem = (global::ColorCode.Styling.Style)item;
            collection.Add(newItem);
        }
        private void VectorAdd_20_KeyedCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ColorCode.Styling.Style>)instance;
            var newItem = (global::ColorCode.Styling.Style)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::ColorCode.Styling.Style>)instance;
            var newItem = (global::ColorCode.Styling.Style)item;
            collection.Add(newItem);
        }
        private void VectorAdd_74_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_100_IList(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Microsoft.UI.Xaml.Controls.TreeViewNode>)instance;
            var newItem = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)item;
            collection.Add(newItem);
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::GMTool.GMTool_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Microsoft.UI.Xaml.Controls.XamlControlsResources
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.ResourceDictionary"));
                userType.Activator = Activate_0_XamlControlsResources;
                userType.DictionaryAdd = MapAdd_0_XamlControlsResources;
                userType.AddMemberName("UseCompactResources");
                xamlType = userType;
                break;

            case 1:   //  Microsoft.UI.Xaml.ResourceDictionary
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Object
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Boolean
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Microsoft.UI.Xaml.Controls.ProgressRing
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_4_ProgressRing;
                userType.AddMemberName("IsActive");
                userType.AddMemberName("IsIndeterminate");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("TemplateSettings");
                userType.AddMemberName("Value");
                xamlType = userType;
                break;

            case 5:   //  Microsoft.UI.Xaml.Controls.Control
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Double
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 8:   //  Microsoft.UI.Xaml.DependencyObject
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 9:   //  CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_9_MarkdownTextBlock;
                userType.AddMemberName("CodeFontFamily");
                userType.AddMemberName("InlineCodeFontFamily");
                userType.AddMemberName("CodeBackground");
                userType.AddMemberName("CodeForeground");
                userType.AddMemberName("InlineCodeBackground");
                userType.AddMemberName("InlineCodeForeground");
                userType.AddMemberName("Header1FontSize");
                userType.AddMemberName("Header2FontSize");
                userType.AddMemberName("Header3FontSize");
                userType.AddMemberName("Header4FontSize");
                userType.AddMemberName("Header5FontSize");
                userType.AddMemberName("Header6FontSize");
                userType.AddMemberName("Header1FontWeight");
                userType.AddMemberName("Header2FontWeight");
                userType.AddMemberName("Header3FontWeight");
                userType.AddMemberName("Header4FontWeight");
                userType.AddMemberName("Header5FontWeight");
                userType.AddMemberName("Header6FontWeight");
                userType.AddMemberName("Text");
                userType.AddMemberName("TextWrapping");
                userType.AddMemberName("IsTextSelectionEnabled");
                userType.AddMemberName("ImageMaxWidth");
                userType.AddMemberName("ImageMaxHeight");
                userType.AddMemberName("ImageStretch");
                userType.AddMemberName("CodeBorderThickness");
                userType.AddMemberName("InlineCodeBorderThickness");
                userType.AddMemberName("InlineCodePadding");
                userType.AddMemberName("InlineCodeMargin");
                userType.AddMemberName("CodeMargin");
                userType.AddMemberName("CodePadding");
                userType.AddMemberName("Header1Margin");
                userType.AddMemberName("Header2Margin");
                userType.AddMemberName("Header3Margin");
                userType.AddMemberName("Header4Margin");
                userType.AddMemberName("Header5Margin");
                userType.AddMemberName("Header6Margin");
                userType.AddMemberName("HorizontalRuleMargin");
                userType.AddMemberName("HorizontalRuleThickness");
                userType.AddMemberName("ListMargin");
                userType.AddMemberName("ListGutterWidth");
                userType.AddMemberName("ListBulletSpacing");
                userType.AddMemberName("ParagraphMargin");
                userType.AddMemberName("ParagraphLineHeight");
                userType.AddMemberName("QuoteBorderThickness");
                userType.AddMemberName("QuoteMargin");
                userType.AddMemberName("QuotePadding");
                userType.AddMemberName("YamlBorderThickness");
                userType.AddMemberName("TableBorderThickness");
                userType.AddMemberName("TableCellPadding");
                userType.AddMemberName("TableMargin");
                userType.AddMemberName("UseSyntaxHighlighting");
                userType.AddMemberName("WrapCodeBlock");
                userType.AddMemberName("CodeStyling");
                userType.AddMemberName("LinkForeground");
                userType.AddMemberName("CodeBorderBrush");
                userType.AddMemberName("InlineCodeBorderBrush");
                userType.AddMemberName("EmojiFontFamily");
                userType.AddMemberName("Header1Foreground");
                userType.AddMemberName("Header2Foreground");
                userType.AddMemberName("Header3Foreground");
                userType.AddMemberName("Header4Foreground");
                userType.AddMemberName("Header5Foreground");
                userType.AddMemberName("Header6Foreground");
                userType.AddMemberName("HorizontalRuleBrush");
                userType.AddMemberName("QuoteBackground");
                userType.AddMemberName("QuoteBorderBrush");
                userType.AddMemberName("QuoteForeground");
                userType.AddMemberName("TableBorderBrush");
                userType.AddMemberName("YamlBorderBrush");
                userType.AddMemberName("UriPrefix");
                userType.AddMemberName("SchemeList");
                xamlType = userType;
                break;

            case 10:   //  Microsoft.UI.Xaml.Media.FontFamily
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Microsoft.UI.Xaml.Media.Brush
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Windows.UI.Text.FontWeight
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 13:   //  System.ValueType
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 14:   //  String
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 15:   //  Microsoft.UI.Xaml.TextWrapping
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 16:   //  Microsoft.UI.Xaml.Media.Stretch
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Microsoft.UI.Xaml.Thickness
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 18:   //  Int32
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 19:   //  ColorCode.Styling.StyleDictionary
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.KeyedCollection`2<String, ColorCode.Styling.Style>"));
                userType.CollectionAdd = VectorAdd_19_StyleDictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 20:   //  System.Collections.ObjectModel.KeyedCollection`2<String, ColorCode.Styling.Style>
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<ColorCode.Styling.Style>"));
                userType.CollectionAdd = VectorAdd_20_KeyedCollection;
                xamlType = userType;
                break;

            case 21:   //  System.Collections.ObjectModel.Collection`1<ColorCode.Styling.Style>
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_21_Collection;
                userType.CollectionAdd = VectorAdd_21_Collection;
                xamlType = userType;
                break;

            case 22:   //  ColorCode.Styling.Style
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Background");
                userType.AddMemberName("Foreground");
                userType.AddMemberName("ScopeName");
                userType.AddMemberName("ReferenceName");
                userType.AddMemberName("Italic");
                userType.AddMemberName("Bold");
                xamlType = userType;
                break;

            case 23:   //  GMTool.ChatBot
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_23_ChatBot;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Microsoft.UI.Xaml.Controls.Page
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 25:   //  Microsoft.UI.Xaml.Controls.UserControl
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 26:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemSeparator
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_26_NavigationViewItemSeparator;
                xamlType = userType;
                break;

            case 27:   //  Microsoft.UI.Xaml.Controls.NavigationViewItemBase
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.AddMemberName("IsSelected");
                xamlType = userType;
                break;

            case 28:   //  Microsoft.UI.Xaml.Controls.ContentControl
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 29:   //  Microsoft.UI.Xaml.Controls.NumberBox
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_29_NumberBox;
                userType.AddMemberName("Header");
                userType.AddMemberName("AcceptsExpression");
                userType.AddMemberName("Minimum");
                userType.AddMemberName("Value");
                userType.AddMemberName("PlaceholderText");
                userType.AddMemberName("Description");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsWrapEnabled");
                userType.AddMemberName("LargeChange");
                userType.AddMemberName("Maximum");
                userType.AddMemberName("NumberFormatter");
                userType.AddMemberName("PreventKeyboardDisplayOnProgrammaticFocus");
                userType.AddMemberName("SelectionFlyout");
                userType.AddMemberName("SelectionHighlightColor");
                userType.AddMemberName("SmallChange");
                userType.AddMemberName("SpinButtonPlacementMode");
                userType.AddMemberName("Text");
                userType.AddMemberName("TextReadingOrder");
                userType.AddMemberName("ValidationMode");
                xamlType = userType;
                break;

            case 30:   //  Microsoft.UI.Xaml.DataTemplate
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 31:   //  Windows.Globalization.NumberFormatting.INumberFormatter2
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 33:   //  Microsoft.UI.Xaml.Media.SolidColorBrush
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 34:   //  Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Hidden", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Hidden);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Compact);
                userType.AddEnumValue("Inline", global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode.Inline);
                xamlType = userType;
                break;

            case 35:   //  System.Enum
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                xamlType = userType;
                break;

            case 36:   //  Microsoft.UI.Xaml.TextReadingOrder
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 37:   //  Microsoft.UI.Xaml.Controls.NumberBoxValidationMode
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("InvalidInputOverwritten", global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode.InvalidInputOverwritten);
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode.Disabled);
                xamlType = userType;
                break;

            case 38:   //  GMTool.ConditionEditor
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_38_ConditionEditor;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  GMTool.DiffViewer
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_39_DiffViewer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Microsoft.UI.Xaml.Controls.SplitButton
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_40_SplitButton;
                userType.AddMemberName("Flyout");
                userType.AddMemberName("Command");
                userType.AddMemberName("CommandParameter");
                xamlType = userType;
                break;

            case 41:   //  System.Windows.Input.ICommand
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 42:   //  Microsoft.UI.Xaml.Controls.TeachingTip
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_42_TeachingTip;
                userType.AddMemberName("Target");
                userType.AddMemberName("Title");
                userType.AddMemberName("IsLightDismissEnabled");
                userType.AddMemberName("PreferredPlacement");
                userType.AddMemberName("ActionButtonContent");
                userType.AddMemberName("ActionButtonStyle");
                userType.AddMemberName("CloseButtonContent");
                userType.AddMemberName("ActionButtonCommand");
                userType.AddMemberName("ActionButtonCommandParameter");
                userType.AddMemberName("CloseButtonCommand");
                userType.AddMemberName("CloseButtonCommandParameter");
                userType.AddMemberName("CloseButtonStyle");
                userType.AddMemberName("HeroContent");
                userType.AddMemberName("HeroContentPlacement");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("PlacementMargin");
                userType.AddMemberName("ShouldConstrainToRootBounds");
                userType.AddMemberName("Subtitle");
                userType.AddMemberName("TailVisibility");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 43:   //  Microsoft.UI.Xaml.FrameworkElement
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Bottom);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Left);
                userType.AddEnumValue("Right", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Right);
                userType.AddEnumValue("TopRight", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.TopRight);
                userType.AddEnumValue("TopLeft", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.TopLeft);
                userType.AddEnumValue("BottomRight", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.BottomRight);
                userType.AddEnumValue("BottomLeft", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.BottomLeft);
                userType.AddEnumValue("LeftTop", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.LeftTop);
                userType.AddEnumValue("LeftBottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.LeftBottom);
                userType.AddEnumValue("RightTop", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.RightTop);
                userType.AddEnumValue("RightBottom", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.RightBottom);
                userType.AddEnumValue("Center", global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode.Center);
                xamlType = userType;
                break;

            case 45:   //  Microsoft.UI.Xaml.Style
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 46:   //  Microsoft.UI.Xaml.UIElement
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 47:   //  Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Auto);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Top);
                userType.AddEnumValue("Bottom", global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode.Bottom);
                xamlType = userType;
                break;

            case 48:   //  Microsoft.UI.Xaml.Controls.IconSource
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 49:   //  Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Auto);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Visible);
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility.Collapsed);
                xamlType = userType;
                break;

            case 50:   //  Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 51:   //  Microsoft.UI.Xaml.Controls.InfoBar
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_51_InfoBar;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.InfoBar.Content");
                userType.AddMemberName("Content");
                userType.AddMemberName("Title");
                userType.AddMemberName("Message");
                userType.AddMemberName("IsIconVisible");
                userType.AddMemberName("Severity");
                userType.AddMemberName("IsClosable");
                userType.AddMemberName("IsOpen");
                userType.AddMemberName("ContentTemplate");
                userType.AddMemberName("ActionButton");
                userType.AddMemberName("CloseButtonCommand");
                userType.AddMemberName("CloseButtonCommandParameter");
                userType.AddMemberName("CloseButtonStyle");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 52:   //  Microsoft.UI.Xaml.Controls.InfoBarSeverity
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Informational", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Informational);
                userType.AddEnumValue("Success", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Success);
                userType.AddEnumValue("Warning", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Warning);
                userType.AddEnumValue("Error", global::Microsoft.UI.Xaml.Controls.InfoBarSeverity.Error);
                xamlType = userType;
                break;

            case 53:   //  Microsoft.UI.Xaml.Controls.Primitives.ButtonBase
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 54:   //  Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 55:   //  GMTool.GMCommandTool
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_55_GMCommandTool;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 56:   //  GMTool.HomePage
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_56_HomePage;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  GMTool.LanguageSearchTool
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_57_LanguageSearchTool;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 58:   //  Microsoft.UI.Xaml.Controls.Expander
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_58_Expander;
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("ExpandDirection");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("HeaderTemplateSelector");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 59:   //  Microsoft.UI.Xaml.Controls.ExpandDirection
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Down", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Down);
                userType.AddEnumValue("Up", global::Microsoft.UI.Xaml.Controls.ExpandDirection.Up);
                xamlType = userType;
                break;

            case 60:   //  Microsoft.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 61:   //  Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 62:   //  GMTool.LogcatTool
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_62_LogcatTool;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 63:   //  WinUIEx.WindowEx
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Window"));
                userType.Activator = Activate_63_WindowEx;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.AddMemberName("WindowContent");
                userType.AddMemberName("Width");
                userType.AddMemberName("Height");
                userType.AddMemberName("MinWidth");
                userType.AddMemberName("MinHeight");
                userType.AddMemberName("TaskBarIcon");
                userType.AddMemberName("AppWindow");
                userType.AddMemberName("Title");
                userType.AddMemberName("PersistenceId");
                userType.AddMemberName("IsTitleBarVisible");
                userType.AddMemberName("IsMinimizable");
                userType.AddMemberName("IsMaximizable");
                userType.AddMemberName("IsResizable");
                userType.AddMemberName("WindowState");
                userType.AddMemberName("IsShownInSwitchers");
                userType.AddMemberName("IsAlwaysOnTop");
                userType.AddMemberName("Presenter");
                userType.AddMemberName("PresenterKind");
                userType.AddMemberName("MaxWidth");
                userType.AddMemberName("MaxHeight");
                userType.AddMemberName("Backdrop");
                xamlType = userType;
                break;

            case 64:   //  Microsoft.UI.Xaml.Window
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 65:   //  WinUIEx.Icon
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CreateFromStringMethod = global::WinUIEx.Icon.FromFile;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 66:   //  Microsoft.UI.Windowing.AppWindow
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 67:   //  WinUIEx.WindowState
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Normal", global::WinUIEx.WindowState.Normal);
                userType.AddEnumValue("Minimized", global::WinUIEx.WindowState.Minimized);
                userType.AddEnumValue("Maximized", global::WinUIEx.WindowState.Maximized);
                xamlType = userType;
                break;

            case 68:   //  Microsoft.UI.Windowing.AppWindowPresenter
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 69:   //  Microsoft.UI.Windowing.AppWindowPresenterKind
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Default", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Default);
                userType.AddEnumValue("CompactOverlay", global::Microsoft.UI.Windowing.AppWindowPresenterKind.CompactOverlay);
                userType.AddEnumValue("FullScreen", global::Microsoft.UI.Windowing.AppWindowPresenterKind.FullScreen);
                userType.AddEnumValue("Overlapped", global::Microsoft.UI.Windowing.AppWindowPresenterKind.Overlapped);
                xamlType = userType;
                break;

            case 70:   //  WinUIEx.SystemBackdrop
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 71:   //  Microsoft.UI.Xaml.Controls.NavigationView
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ContentControl"));
                userType.Activator = Activate_71_NavigationView;
                userType.AddMemberName("IsTitleBarAutoPaddingEnabled");
                userType.AddMemberName("AlwaysShowHeader");
                userType.AddMemberName("PaneDisplayMode");
                userType.AddMemberName("IsPaneOpen");
                userType.AddMemberName("CompactModeThresholdWidth");
                userType.AddMemberName("ExpandedModeThresholdWidth");
                userType.AddMemberName("OpenPaneLength");
                userType.AddMemberName("IsSettingsVisible");
                userType.AddMemberName("IsBackButtonVisible");
                userType.AddMemberName("IsBackEnabled");
                userType.AddMemberName("IsPaneToggleButtonVisible");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("FooterMenuItems");
                userType.AddMemberName("AutoSuggestBox");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("ContentOverlay");
                userType.AddMemberName("DisplayMode");
                userType.AddMemberName("FooterMenuItemsSource");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("IsPaneVisible");
                userType.AddMemberName("MenuItemContainerStyle");
                userType.AddMemberName("MenuItemContainerStyleSelector");
                userType.AddMemberName("MenuItemTemplate");
                userType.AddMemberName("MenuItemTemplateSelector");
                userType.AddMemberName("MenuItemsSource");
                userType.AddMemberName("OverflowLabelMode");
                userType.AddMemberName("PaneCustomContent");
                userType.AddMemberName("PaneFooter");
                userType.AddMemberName("PaneHeader");
                userType.AddMemberName("PaneTitle");
                userType.AddMemberName("PaneToggleButtonStyle");
                userType.AddMemberName("SelectedItem");
                userType.AddMemberName("SelectionFollowsFocus");
                userType.AddMemberName("SettingsItem");
                userType.AddMemberName("ShoulderNavigationEnabled");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 72:   //  Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Auto);
                userType.AddEnumValue("Left", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Left);
                userType.AddEnumValue("Top", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.Top);
                userType.AddEnumValue("LeftCompact", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftCompact);
                userType.AddEnumValue("LeftMinimal", global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode.LeftMinimal);
                xamlType = userType;
                break;

            case 73:   //  Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Collapsed", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Collapsed);
                userType.AddEnumValue("Visible", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Visible);
                userType.AddEnumValue("Auto", global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible.Auto);
                xamlType = userType;
                break;

            case 74:   //  System.Collections.Generic.IList`1<Object>
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_74_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 75:   //  Microsoft.UI.Xaml.Controls.AutoSuggestBox
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 76:   //  Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Minimal", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Minimal);
                userType.AddEnumValue("Compact", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Compact);
                userType.AddEnumValue("Expanded", global::Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode.Expanded);
                xamlType = userType;
                break;

            case 77:   //  Microsoft.UI.Xaml.Controls.StyleSelector
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 78:   //  Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("MoreLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.MoreLabel);
                userType.AddEnumValue("NoLabel", global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode.NoLabel);
                xamlType = userType;
                break;

            case 79:   //  Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("Disabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Disabled);
                userType.AddEnumValue("Enabled", global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus.Enabled);
                xamlType = userType;
                break;

            case 80:   //  Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Enum"));
                userType.AddEnumValue("WhenSelectionFollowsFocus", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.WhenSelectionFollowsFocus);
                userType.AddEnumValue("Always", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Always);
                userType.AddEnumValue("Never", global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled.Never);
                xamlType = userType;
                break;

            case 81:   //  Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 82:   //  Microsoft.UI.Xaml.Controls.NavigationViewItem
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase"));
                userType.Activator = Activate_82_NavigationViewItem;
                userType.AddMemberName("Icon");
                userType.AddMemberName("SelectsOnInvoked");
                userType.AddMemberName("InfoBadge");
                userType.AddMemberName("CompactPaneLength");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsChildSelected");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("MenuItems");
                userType.AddMemberName("MenuItemsSource");
                xamlType = userType;
                break;

            case 83:   //  Microsoft.UI.Xaml.Controls.IconElement
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 84:   //  Microsoft.UI.Xaml.Controls.InfoBadge
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_84_InfoBadge;
                userType.AddMemberName("Value");
                userType.AddMemberName("IconSource");
                userType.AddMemberName("TemplateSettings");
                xamlType = userType;
                break;

            case 85:   //  Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 86:   //  GMTool.MainWindow
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("WinUIEx.WindowEx"));
                userType.Activator = Activate_86_MainWindow;
                userType.SetContentPropertyName("WinUIEx.WindowEx.WindowContent");
                userType.AddMemberName("AppWindow");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 87:   //  CommunityToolkit.WinUI.Controls.Segmented
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ListViewBase"));
                userType.Activator = Activate_87_Segmented;
                xamlType = userType;
                break;

            case 88:   //  Microsoft.UI.Xaml.Controls.ListViewBase
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 89:   //  Microsoft.UI.Xaml.Controls.ItemsControl
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 90:   //  CommunityToolkit.WinUI.Controls.SegmentedItem
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ListViewItem"));
                userType.Activator = Activate_90_SegmentedItem;
                userType.AddMemberName("Icon");
                xamlType = userType;
                break;

            case 91:   //  Microsoft.UI.Xaml.Controls.ListViewItem
                xamlType = new global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 92:   //  GMTool.PackageViewer
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_92_PackageViewer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 93:   //  GMTool.PlayerTransfer
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_93_PlayerTransfer;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 94:   //  GMTool.ResourceCheckTool
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_94_ResourceCheckTool;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 95:   //  Microsoft.UI.Xaml.Controls.RadioButtons
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Control"));
                userType.Activator = Activate_95_RadioButtons;
                userType.SetContentPropertyName("Microsoft.UI.Xaml.Controls.RadioButtons.Items");
                userType.AddMemberName("Items");
                userType.AddMemberName("Header");
                userType.AddMemberName("HeaderTemplate");
                userType.AddMemberName("ItemTemplate");
                userType.AddMemberName("ItemsSource");
                userType.AddMemberName("MaxColumns");
                userType.AddMemberName("SelectedIndex");
                userType.AddMemberName("SelectedItem");
                xamlType = userType;
                break;

            case 96:   //  GMTool.Settings
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_96_Settings;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 97:   //  GMTool.TimeConverter
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_97_TimeConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 98:   //  GMTool.View.ExcelLockMgr
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_98_ExcelLockMgr;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 99:   //  Microsoft.UI.Xaml.Controls.TreeViewNode
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Microsoft.UI.Xaml.DependencyObject"));
                userType.Activator = Activate_99_TreeViewNode;
                userType.AddMemberName("Children");
                userType.AddMemberName("Content");
                userType.AddMemberName("Depth");
                userType.AddMemberName("HasChildren");
                userType.AddMemberName("HasUnrealizedChildren");
                userType.AddMemberName("IsExpanded");
                userType.AddMemberName("Parent");
                userType.SetIsBindable();
                xamlType = userType;
                break;

            case 100:   //  System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>
                userType = new global::GMTool.GMTool_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.CollectionAdd = VectorAdd_100_IList;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    var otherProviders = new global::System.Collections.Generic.List<global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::CommunityToolkit.WinUI.Controls.SegmentedRns.CommunityToolkit_WinUI_Controls_Segmented_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_Core_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_DataGrid_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::CommunityToolkit.WinUI.UI.Controls.CommunityToolkit_WinUI_UI_Controls_Markdown_XamlTypeInfo.XamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    provider = new global::Microsoft.UI.Xaml.XamlTypeInfo.XamlControlsXamlMetaDataProvider() as global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider;
                    otherProviders.Add(provider); 
                    _otherProviders = otherProviders;
                }
                return _otherProviders;
            }
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Microsoft.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Microsoft.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_XamlControlsResources_UseCompactResources(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            return that.UseCompactResources;
        }
        private void set_0_XamlControlsResources_UseCompactResources(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.XamlControlsResources)instance;
            that.UseCompactResources = (global::System.Boolean)Value;
        }
        private object get_1_ProgressRing_IsActive(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.IsActive;
        }
        private void set_1_ProgressRing_IsActive(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.IsActive = (global::System.Boolean)Value;
        }
        private object get_2_ProgressRing_IsIndeterminate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.IsIndeterminate;
        }
        private void set_2_ProgressRing_IsIndeterminate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.IsIndeterminate = (global::System.Boolean)Value;
        }
        private object get_3_ProgressRing_Maximum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Maximum;
        }
        private void set_3_ProgressRing_Maximum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_4_ProgressRing_Minimum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Minimum;
        }
        private void set_4_ProgressRing_Minimum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_5_ProgressRing_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.TemplateSettings;
        }
        private object get_6_ProgressRing_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            return that.Value;
        }
        private void set_6_ProgressRing_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.ProgressRing)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_7_MarkdownTextBlock_CodeFontFamily(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.CodeFontFamily;
        }
        private void set_7_MarkdownTextBlock_CodeFontFamily(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.CodeFontFamily = (global::Microsoft.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_8_MarkdownTextBlock_InlineCodeFontFamily(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.InlineCodeFontFamily;
        }
        private void set_8_MarkdownTextBlock_InlineCodeFontFamily(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.InlineCodeFontFamily = (global::Microsoft.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_9_MarkdownTextBlock_CodeBackground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.CodeBackground;
        }
        private void set_9_MarkdownTextBlock_CodeBackground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.CodeBackground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_10_MarkdownTextBlock_CodeForeground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.CodeForeground;
        }
        private void set_10_MarkdownTextBlock_CodeForeground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.CodeForeground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_11_MarkdownTextBlock_InlineCodeBackground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.InlineCodeBackground;
        }
        private void set_11_MarkdownTextBlock_InlineCodeBackground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.InlineCodeBackground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_12_MarkdownTextBlock_InlineCodeForeground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.InlineCodeForeground;
        }
        private void set_12_MarkdownTextBlock_InlineCodeForeground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.InlineCodeForeground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_13_MarkdownTextBlock_Header1FontSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header1FontSize;
        }
        private void set_13_MarkdownTextBlock_Header1FontSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header1FontSize = (global::System.Double)Value;
        }
        private object get_14_MarkdownTextBlock_Header2FontSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header2FontSize;
        }
        private void set_14_MarkdownTextBlock_Header2FontSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header2FontSize = (global::System.Double)Value;
        }
        private object get_15_MarkdownTextBlock_Header3FontSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header3FontSize;
        }
        private void set_15_MarkdownTextBlock_Header3FontSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header3FontSize = (global::System.Double)Value;
        }
        private object get_16_MarkdownTextBlock_Header4FontSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header4FontSize;
        }
        private void set_16_MarkdownTextBlock_Header4FontSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header4FontSize = (global::System.Double)Value;
        }
        private object get_17_MarkdownTextBlock_Header5FontSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header5FontSize;
        }
        private void set_17_MarkdownTextBlock_Header5FontSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header5FontSize = (global::System.Double)Value;
        }
        private object get_18_MarkdownTextBlock_Header6FontSize(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header6FontSize;
        }
        private void set_18_MarkdownTextBlock_Header6FontSize(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header6FontSize = (global::System.Double)Value;
        }
        private object get_19_MarkdownTextBlock_Header1FontWeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header1FontWeight;
        }
        private void set_19_MarkdownTextBlock_Header1FontWeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header1FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_20_MarkdownTextBlock_Header2FontWeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header2FontWeight;
        }
        private void set_20_MarkdownTextBlock_Header2FontWeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header2FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_21_MarkdownTextBlock_Header3FontWeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header3FontWeight;
        }
        private void set_21_MarkdownTextBlock_Header3FontWeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header3FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_22_MarkdownTextBlock_Header4FontWeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header4FontWeight;
        }
        private void set_22_MarkdownTextBlock_Header4FontWeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header4FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_23_MarkdownTextBlock_Header5FontWeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header5FontWeight;
        }
        private void set_23_MarkdownTextBlock_Header5FontWeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header5FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_24_MarkdownTextBlock_Header6FontWeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header6FontWeight;
        }
        private void set_24_MarkdownTextBlock_Header6FontWeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header6FontWeight = (global::Windows.UI.Text.FontWeight)Value;
        }
        private object get_25_MarkdownTextBlock_Text(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Text;
        }
        private void set_25_MarkdownTextBlock_Text(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_26_MarkdownTextBlock_TextWrapping(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.TextWrapping;
        }
        private void set_26_MarkdownTextBlock_TextWrapping(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.TextWrapping = (global::Microsoft.UI.Xaml.TextWrapping)Value;
        }
        private object get_27_MarkdownTextBlock_IsTextSelectionEnabled(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.IsTextSelectionEnabled;
        }
        private void set_27_MarkdownTextBlock_IsTextSelectionEnabled(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.IsTextSelectionEnabled = (global::System.Boolean)Value;
        }
        private object get_28_MarkdownTextBlock_ImageMaxWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.ImageMaxWidth;
        }
        private void set_28_MarkdownTextBlock_ImageMaxWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.ImageMaxWidth = (global::System.Double)Value;
        }
        private object get_29_MarkdownTextBlock_ImageMaxHeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.ImageMaxHeight;
        }
        private void set_29_MarkdownTextBlock_ImageMaxHeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.ImageMaxHeight = (global::System.Double)Value;
        }
        private object get_30_MarkdownTextBlock_ImageStretch(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.ImageStretch;
        }
        private void set_30_MarkdownTextBlock_ImageStretch(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.ImageStretch = (global::Microsoft.UI.Xaml.Media.Stretch)Value;
        }
        private object get_31_MarkdownTextBlock_CodeBorderThickness(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.CodeBorderThickness;
        }
        private void set_31_MarkdownTextBlock_CodeBorderThickness(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.CodeBorderThickness = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_32_MarkdownTextBlock_InlineCodeBorderThickness(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.InlineCodeBorderThickness;
        }
        private void set_32_MarkdownTextBlock_InlineCodeBorderThickness(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.InlineCodeBorderThickness = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_33_MarkdownTextBlock_InlineCodePadding(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.InlineCodePadding;
        }
        private void set_33_MarkdownTextBlock_InlineCodePadding(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.InlineCodePadding = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_34_MarkdownTextBlock_InlineCodeMargin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.InlineCodeMargin;
        }
        private void set_34_MarkdownTextBlock_InlineCodeMargin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.InlineCodeMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_35_MarkdownTextBlock_CodeMargin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.CodeMargin;
        }
        private void set_35_MarkdownTextBlock_CodeMargin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.CodeMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_36_MarkdownTextBlock_CodePadding(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.CodePadding;
        }
        private void set_36_MarkdownTextBlock_CodePadding(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.CodePadding = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_37_MarkdownTextBlock_Header1Margin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header1Margin;
        }
        private void set_37_MarkdownTextBlock_Header1Margin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header1Margin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_38_MarkdownTextBlock_Header2Margin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header2Margin;
        }
        private void set_38_MarkdownTextBlock_Header2Margin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header2Margin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_39_MarkdownTextBlock_Header3Margin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header3Margin;
        }
        private void set_39_MarkdownTextBlock_Header3Margin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header3Margin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_40_MarkdownTextBlock_Header4Margin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header4Margin;
        }
        private void set_40_MarkdownTextBlock_Header4Margin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header4Margin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_41_MarkdownTextBlock_Header5Margin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header5Margin;
        }
        private void set_41_MarkdownTextBlock_Header5Margin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header5Margin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_42_MarkdownTextBlock_Header6Margin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header6Margin;
        }
        private void set_42_MarkdownTextBlock_Header6Margin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header6Margin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_43_MarkdownTextBlock_HorizontalRuleMargin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.HorizontalRuleMargin;
        }
        private void set_43_MarkdownTextBlock_HorizontalRuleMargin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.HorizontalRuleMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_44_MarkdownTextBlock_HorizontalRuleThickness(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.HorizontalRuleThickness;
        }
        private void set_44_MarkdownTextBlock_HorizontalRuleThickness(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.HorizontalRuleThickness = (global::System.Double)Value;
        }
        private object get_45_MarkdownTextBlock_ListMargin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.ListMargin;
        }
        private void set_45_MarkdownTextBlock_ListMargin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.ListMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_46_MarkdownTextBlock_ListGutterWidth(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.ListGutterWidth;
        }
        private void set_46_MarkdownTextBlock_ListGutterWidth(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.ListGutterWidth = (global::System.Double)Value;
        }
        private object get_47_MarkdownTextBlock_ListBulletSpacing(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.ListBulletSpacing;
        }
        private void set_47_MarkdownTextBlock_ListBulletSpacing(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.ListBulletSpacing = (global::System.Double)Value;
        }
        private object get_48_MarkdownTextBlock_ParagraphMargin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.ParagraphMargin;
        }
        private void set_48_MarkdownTextBlock_ParagraphMargin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.ParagraphMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_49_MarkdownTextBlock_ParagraphLineHeight(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.ParagraphLineHeight;
        }
        private void set_49_MarkdownTextBlock_ParagraphLineHeight(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.ParagraphLineHeight = (global::System.Int32)Value;
        }
        private object get_50_MarkdownTextBlock_QuoteBorderThickness(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.QuoteBorderThickness;
        }
        private void set_50_MarkdownTextBlock_QuoteBorderThickness(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.QuoteBorderThickness = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_51_MarkdownTextBlock_QuoteMargin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.QuoteMargin;
        }
        private void set_51_MarkdownTextBlock_QuoteMargin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.QuoteMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_52_MarkdownTextBlock_QuotePadding(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.QuotePadding;
        }
        private void set_52_MarkdownTextBlock_QuotePadding(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.QuotePadding = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_53_MarkdownTextBlock_YamlBorderThickness(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.YamlBorderThickness;
        }
        private void set_53_MarkdownTextBlock_YamlBorderThickness(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.YamlBorderThickness = (global::System.Double)Value;
        }
        private object get_54_MarkdownTextBlock_TableBorderThickness(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.TableBorderThickness;
        }
        private void set_54_MarkdownTextBlock_TableBorderThickness(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.TableBorderThickness = (global::System.Double)Value;
        }
        private object get_55_MarkdownTextBlock_TableCellPadding(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.TableCellPadding;
        }
        private void set_55_MarkdownTextBlock_TableCellPadding(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.TableCellPadding = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_56_MarkdownTextBlock_TableMargin(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.TableMargin;
        }
        private void set_56_MarkdownTextBlock_TableMargin(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.TableMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_57_MarkdownTextBlock_UseSyntaxHighlighting(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.UseSyntaxHighlighting;
        }
        private void set_57_MarkdownTextBlock_UseSyntaxHighlighting(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.UseSyntaxHighlighting = (global::System.Boolean)Value;
        }
        private object get_58_MarkdownTextBlock_WrapCodeBlock(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.WrapCodeBlock;
        }
        private void set_58_MarkdownTextBlock_WrapCodeBlock(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.WrapCodeBlock = (global::System.Boolean)Value;
        }
        private object get_59_MarkdownTextBlock_CodeStyling(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.CodeStyling;
        }
        private void set_59_MarkdownTextBlock_CodeStyling(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.CodeStyling = (global::ColorCode.Styling.StyleDictionary)Value;
        }
        private object get_60_Style_Background(object instance)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            return that.Background;
        }
        private void set_60_Style_Background(object instance, object Value)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            that.Background = (global::System.String)Value;
        }
        private object get_61_Style_Foreground(object instance)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            return that.Foreground;
        }
        private void set_61_Style_Foreground(object instance, object Value)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            that.Foreground = (global::System.String)Value;
        }
        private object get_62_Style_ScopeName(object instance)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            return that.ScopeName;
        }
        private void set_62_Style_ScopeName(object instance, object Value)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            that.ScopeName = (global::System.String)Value;
        }
        private object get_63_Style_ReferenceName(object instance)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            return that.ReferenceName;
        }
        private void set_63_Style_ReferenceName(object instance, object Value)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            that.ReferenceName = (global::System.String)Value;
        }
        private object get_64_Style_Italic(object instance)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            return that.Italic;
        }
        private void set_64_Style_Italic(object instance, object Value)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            that.Italic = (global::System.Boolean)Value;
        }
        private object get_65_Style_Bold(object instance)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            return that.Bold;
        }
        private void set_65_Style_Bold(object instance, object Value)
        {
            var that = (global::ColorCode.Styling.Style)instance;
            that.Bold = (global::System.Boolean)Value;
        }
        private object get_66_MarkdownTextBlock_LinkForeground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.LinkForeground;
        }
        private void set_66_MarkdownTextBlock_LinkForeground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.LinkForeground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_67_MarkdownTextBlock_CodeBorderBrush(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.CodeBorderBrush;
        }
        private void set_67_MarkdownTextBlock_CodeBorderBrush(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.CodeBorderBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_68_MarkdownTextBlock_InlineCodeBorderBrush(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.InlineCodeBorderBrush;
        }
        private void set_68_MarkdownTextBlock_InlineCodeBorderBrush(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.InlineCodeBorderBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_69_MarkdownTextBlock_EmojiFontFamily(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.EmojiFontFamily;
        }
        private void set_69_MarkdownTextBlock_EmojiFontFamily(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.EmojiFontFamily = (global::Microsoft.UI.Xaml.Media.FontFamily)Value;
        }
        private object get_70_MarkdownTextBlock_Header1Foreground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header1Foreground;
        }
        private void set_70_MarkdownTextBlock_Header1Foreground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header1Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_71_MarkdownTextBlock_Header2Foreground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header2Foreground;
        }
        private void set_71_MarkdownTextBlock_Header2Foreground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header2Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_72_MarkdownTextBlock_Header3Foreground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header3Foreground;
        }
        private void set_72_MarkdownTextBlock_Header3Foreground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header3Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_73_MarkdownTextBlock_Header4Foreground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header4Foreground;
        }
        private void set_73_MarkdownTextBlock_Header4Foreground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header4Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_74_MarkdownTextBlock_Header5Foreground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header5Foreground;
        }
        private void set_74_MarkdownTextBlock_Header5Foreground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header5Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_75_MarkdownTextBlock_Header6Foreground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.Header6Foreground;
        }
        private void set_75_MarkdownTextBlock_Header6Foreground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.Header6Foreground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_76_MarkdownTextBlock_HorizontalRuleBrush(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.HorizontalRuleBrush;
        }
        private void set_76_MarkdownTextBlock_HorizontalRuleBrush(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.HorizontalRuleBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_77_MarkdownTextBlock_QuoteBackground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.QuoteBackground;
        }
        private void set_77_MarkdownTextBlock_QuoteBackground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.QuoteBackground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_78_MarkdownTextBlock_QuoteBorderBrush(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.QuoteBorderBrush;
        }
        private void set_78_MarkdownTextBlock_QuoteBorderBrush(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.QuoteBorderBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_79_MarkdownTextBlock_QuoteForeground(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.QuoteForeground;
        }
        private void set_79_MarkdownTextBlock_QuoteForeground(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.QuoteForeground = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_80_MarkdownTextBlock_TableBorderBrush(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.TableBorderBrush;
        }
        private void set_80_MarkdownTextBlock_TableBorderBrush(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.TableBorderBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_81_MarkdownTextBlock_YamlBorderBrush(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.YamlBorderBrush;
        }
        private void set_81_MarkdownTextBlock_YamlBorderBrush(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.YamlBorderBrush = (global::Microsoft.UI.Xaml.Media.Brush)Value;
        }
        private object get_82_MarkdownTextBlock_UriPrefix(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.UriPrefix;
        }
        private void set_82_MarkdownTextBlock_UriPrefix(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.UriPrefix = (global::System.String)Value;
        }
        private object get_83_MarkdownTextBlock_SchemeList(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            return that.SchemeList;
        }
        private void set_83_MarkdownTextBlock_SchemeList(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock)instance;
            that.SchemeList = (global::System.String)Value;
        }
        private object get_84_NavigationViewItemBase_IsSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            return that.IsSelected;
        }
        private void set_84_NavigationViewItemBase_IsSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItemBase)instance;
            that.IsSelected = (global::System.Boolean)Value;
        }
        private object get_85_NumberBox_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Header;
        }
        private void set_85_NumberBox_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_86_NumberBox_AcceptsExpression(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.AcceptsExpression;
        }
        private void set_86_NumberBox_AcceptsExpression(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.AcceptsExpression = (global::System.Boolean)Value;
        }
        private object get_87_NumberBox_Minimum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Minimum;
        }
        private void set_87_NumberBox_Minimum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Minimum = (global::System.Double)Value;
        }
        private object get_88_NumberBox_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Value;
        }
        private void set_88_NumberBox_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Value = (global::System.Double)Value;
        }
        private object get_89_NumberBox_PlaceholderText(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.PlaceholderText;
        }
        private void set_89_NumberBox_PlaceholderText(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.PlaceholderText = (global::System.String)Value;
        }
        private object get_90_NumberBox_Description(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Description;
        }
        private void set_90_NumberBox_Description(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Description = (global::System.Object)Value;
        }
        private object get_91_NumberBox_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.HeaderTemplate;
        }
        private void set_91_NumberBox_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_92_NumberBox_IsWrapEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.IsWrapEnabled;
        }
        private void set_92_NumberBox_IsWrapEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.IsWrapEnabled = (global::System.Boolean)Value;
        }
        private object get_93_NumberBox_LargeChange(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.LargeChange;
        }
        private void set_93_NumberBox_LargeChange(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.LargeChange = (global::System.Double)Value;
        }
        private object get_94_NumberBox_Maximum(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Maximum;
        }
        private void set_94_NumberBox_Maximum(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Maximum = (global::System.Double)Value;
        }
        private object get_95_NumberBox_NumberFormatter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.NumberFormatter;
        }
        private void set_95_NumberBox_NumberFormatter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.NumberFormatter = (global::Windows.Globalization.NumberFormatting.INumberFormatter2)Value;
        }
        private object get_96_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.PreventKeyboardDisplayOnProgrammaticFocus;
        }
        private void set_96_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.PreventKeyboardDisplayOnProgrammaticFocus = (global::System.Boolean)Value;
        }
        private object get_97_NumberBox_SelectionFlyout(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SelectionFlyout;
        }
        private void set_97_NumberBox_SelectionFlyout(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SelectionFlyout = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)Value;
        }
        private object get_98_NumberBox_SelectionHighlightColor(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SelectionHighlightColor;
        }
        private void set_98_NumberBox_SelectionHighlightColor(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SelectionHighlightColor = (global::Microsoft.UI.Xaml.Media.SolidColorBrush)Value;
        }
        private object get_99_NumberBox_SmallChange(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SmallChange;
        }
        private void set_99_NumberBox_SmallChange(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SmallChange = (global::System.Double)Value;
        }
        private object get_100_NumberBox_SpinButtonPlacementMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.SpinButtonPlacementMode;
        }
        private void set_100_NumberBox_SpinButtonPlacementMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.SpinButtonPlacementMode = (global::Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode)Value;
        }
        private object get_101_NumberBox_Text(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.Text;
        }
        private void set_101_NumberBox_Text(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.Text = (global::System.String)Value;
        }
        private object get_102_NumberBox_TextReadingOrder(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.TextReadingOrder;
        }
        private void set_102_NumberBox_TextReadingOrder(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.TextReadingOrder = (global::Microsoft.UI.Xaml.TextReadingOrder)Value;
        }
        private object get_103_NumberBox_ValidationMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            return that.ValidationMode;
        }
        private void set_103_NumberBox_ValidationMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NumberBox)instance;
            that.ValidationMode = (global::Microsoft.UI.Xaml.Controls.NumberBoxValidationMode)Value;
        }
        private object get_104_SplitButton_Flyout(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SplitButton)instance;
            return that.Flyout;
        }
        private void set_104_SplitButton_Flyout(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SplitButton)instance;
            that.Flyout = (global::Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase)Value;
        }
        private object get_105_SplitButton_Command(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SplitButton)instance;
            return that.Command;
        }
        private void set_105_SplitButton_Command(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SplitButton)instance;
            that.Command = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_106_SplitButton_CommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SplitButton)instance;
            return that.CommandParameter;
        }
        private void set_106_SplitButton_CommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.SplitButton)instance;
            that.CommandParameter = (global::System.Object)Value;
        }
        private object get_107_TeachingTip_Target(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Target;
        }
        private void set_107_TeachingTip_Target(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Target = (global::Microsoft.UI.Xaml.FrameworkElement)Value;
        }
        private object get_108_TeachingTip_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Title;
        }
        private void set_108_TeachingTip_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_109_TeachingTip_IsLightDismissEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IsLightDismissEnabled;
        }
        private void set_109_TeachingTip_IsLightDismissEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IsLightDismissEnabled = (global::System.Boolean)Value;
        }
        private object get_110_TeachingTip_PreferredPlacement(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.PreferredPlacement;
        }
        private void set_110_TeachingTip_PreferredPlacement(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.PreferredPlacement = (global::Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode)Value;
        }
        private object get_111_TeachingTip_ActionButtonContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonContent;
        }
        private void set_111_TeachingTip_ActionButtonContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonContent = (global::System.Object)Value;
        }
        private object get_112_TeachingTip_ActionButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonStyle;
        }
        private void set_112_TeachingTip_ActionButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_113_TeachingTip_CloseButtonContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonContent;
        }
        private void set_113_TeachingTip_CloseButtonContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonContent = (global::System.Object)Value;
        }
        private object get_114_TeachingTip_ActionButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonCommand;
        }
        private void set_114_TeachingTip_ActionButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_115_TeachingTip_ActionButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ActionButtonCommandParameter;
        }
        private void set_115_TeachingTip_ActionButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ActionButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_116_TeachingTip_CloseButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonCommand;
        }
        private void set_116_TeachingTip_CloseButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_117_TeachingTip_CloseButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonCommandParameter;
        }
        private void set_117_TeachingTip_CloseButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_118_TeachingTip_CloseButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.CloseButtonStyle;
        }
        private void set_118_TeachingTip_CloseButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.CloseButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_119_TeachingTip_HeroContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.HeroContent;
        }
        private void set_119_TeachingTip_HeroContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.HeroContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_120_TeachingTip_HeroContentPlacement(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.HeroContentPlacement;
        }
        private void set_120_TeachingTip_HeroContentPlacement(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.HeroContentPlacement = (global::Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode)Value;
        }
        private object get_121_TeachingTip_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IconSource;
        }
        private void set_121_TeachingTip_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_122_TeachingTip_IsOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.IsOpen;
        }
        private void set_122_TeachingTip_IsOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_123_TeachingTip_PlacementMargin(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.PlacementMargin;
        }
        private void set_123_TeachingTip_PlacementMargin(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.PlacementMargin = (global::Microsoft.UI.Xaml.Thickness)Value;
        }
        private object get_124_TeachingTip_ShouldConstrainToRootBounds(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.ShouldConstrainToRootBounds;
        }
        private void set_124_TeachingTip_ShouldConstrainToRootBounds(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.ShouldConstrainToRootBounds = (global::System.Boolean)Value;
        }
        private object get_125_TeachingTip_Subtitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.Subtitle;
        }
        private void set_125_TeachingTip_Subtitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.Subtitle = (global::System.String)Value;
        }
        private object get_126_TeachingTip_TailVisibility(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.TailVisibility;
        }
        private void set_126_TeachingTip_TailVisibility(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            that.TailVisibility = (global::Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility)Value;
        }
        private object get_127_TeachingTip_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TeachingTip)instance;
            return that.TemplateSettings;
        }
        private object get_128_InfoBar_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Content;
        }
        private void set_128_InfoBar_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_129_InfoBar_Title(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Title;
        }
        private void set_129_InfoBar_Title(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_130_InfoBar_Message(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Message;
        }
        private void set_130_InfoBar_Message(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Message = (global::System.String)Value;
        }
        private object get_131_InfoBar_IsIconVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsIconVisible;
        }
        private void set_131_InfoBar_IsIconVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsIconVisible = (global::System.Boolean)Value;
        }
        private object get_132_InfoBar_Severity(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.Severity;
        }
        private void set_132_InfoBar_Severity(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.Severity = (global::Microsoft.UI.Xaml.Controls.InfoBarSeverity)Value;
        }
        private object get_133_InfoBar_IsClosable(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsClosable;
        }
        private void set_133_InfoBar_IsClosable(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsClosable = (global::System.Boolean)Value;
        }
        private object get_134_InfoBar_IsOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IsOpen;
        }
        private void set_134_InfoBar_IsOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IsOpen = (global::System.Boolean)Value;
        }
        private object get_135_InfoBar_ContentTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.ContentTemplate;
        }
        private void set_135_InfoBar_ContentTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.ContentTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_136_InfoBar_ActionButton(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.ActionButton;
        }
        private void set_136_InfoBar_ActionButton(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.ActionButton = (global::Microsoft.UI.Xaml.Controls.Primitives.ButtonBase)Value;
        }
        private object get_137_InfoBar_CloseButtonCommand(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonCommand;
        }
        private void set_137_InfoBar_CloseButtonCommand(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_138_InfoBar_CloseButtonCommandParameter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonCommandParameter;
        }
        private void set_138_InfoBar_CloseButtonCommandParameter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonCommandParameter = (global::System.Object)Value;
        }
        private object get_139_InfoBar_CloseButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.CloseButtonStyle;
        }
        private void set_139_InfoBar_CloseButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.CloseButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_140_InfoBar_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.IconSource;
        }
        private void set_140_InfoBar_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_141_InfoBar_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBar)instance;
            return that.TemplateSettings;
        }
        private object get_142_Expander_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.IsExpanded;
        }
        private void set_142_Expander_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_143_Expander_ExpandDirection(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.ExpandDirection;
        }
        private void set_143_Expander_ExpandDirection(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.ExpandDirection = (global::Microsoft.UI.Xaml.Controls.ExpandDirection)Value;
        }
        private object get_144_Expander_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.Header;
        }
        private void set_144_Expander_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_145_Expander_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplate;
        }
        private void set_145_Expander_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_146_Expander_HeaderTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.HeaderTemplateSelector;
        }
        private void set_146_Expander_HeaderTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            that.HeaderTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_147_Expander_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.Expander)instance;
            return that.TemplateSettings;
        }
        private object get_148_WindowEx_WindowContent(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowContent;
        }
        private void set_148_WindowEx_WindowContent(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowContent = (global::System.Object)Value;
        }
        private object get_149_WindowEx_Width(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Width;
        }
        private void set_149_WindowEx_Width(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Width = (global::System.Double)Value;
        }
        private object get_150_WindowEx_Height(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Height;
        }
        private void set_150_WindowEx_Height(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Height = (global::System.Double)Value;
        }
        private object get_151_WindowEx_MinWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinWidth;
        }
        private void set_151_WindowEx_MinWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinWidth = (global::System.Double)Value;
        }
        private object get_152_WindowEx_MinHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MinHeight;
        }
        private void set_152_WindowEx_MinHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MinHeight = (global::System.Double)Value;
        }
        private object get_153_WindowEx_TaskBarIcon(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.TaskBarIcon;
        }
        private void set_153_WindowEx_TaskBarIcon(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.TaskBarIcon = (global::WinUIEx.Icon)Value;
        }
        private object get_154_WindowEx_AppWindow(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.AppWindow;
        }
        private object get_155_WindowEx_Title(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Title;
        }
        private void set_155_WindowEx_Title(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Title = (global::System.String)Value;
        }
        private object get_156_WindowEx_PersistenceId(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PersistenceId;
        }
        private void set_156_WindowEx_PersistenceId(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PersistenceId = (global::System.String)Value;
        }
        private object get_157_WindowEx_IsTitleBarVisible(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsTitleBarVisible;
        }
        private void set_157_WindowEx_IsTitleBarVisible(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsTitleBarVisible = (global::System.Boolean)Value;
        }
        private object get_158_WindowEx_IsMinimizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMinimizable;
        }
        private void set_158_WindowEx_IsMinimizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMinimizable = (global::System.Boolean)Value;
        }
        private object get_159_WindowEx_IsMaximizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsMaximizable;
        }
        private void set_159_WindowEx_IsMaximizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsMaximizable = (global::System.Boolean)Value;
        }
        private object get_160_WindowEx_IsResizable(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsResizable;
        }
        private void set_160_WindowEx_IsResizable(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsResizable = (global::System.Boolean)Value;
        }
        private object get_161_WindowEx_WindowState(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.WindowState;
        }
        private void set_161_WindowEx_WindowState(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.WindowState = (global::WinUIEx.WindowState)Value;
        }
        private object get_162_WindowEx_IsShownInSwitchers(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsShownInSwitchers;
        }
        private void set_162_WindowEx_IsShownInSwitchers(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsShownInSwitchers = (global::System.Boolean)Value;
        }
        private object get_163_WindowEx_IsAlwaysOnTop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.IsAlwaysOnTop;
        }
        private void set_163_WindowEx_IsAlwaysOnTop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.IsAlwaysOnTop = (global::System.Boolean)Value;
        }
        private object get_164_WindowEx_Presenter(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Presenter;
        }
        private object get_165_WindowEx_PresenterKind(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.PresenterKind;
        }
        private void set_165_WindowEx_PresenterKind(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.PresenterKind = (global::Microsoft.UI.Windowing.AppWindowPresenterKind)Value;
        }
        private object get_166_WindowEx_MaxWidth(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxWidth;
        }
        private void set_166_WindowEx_MaxWidth(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxWidth = (global::System.Double)Value;
        }
        private object get_167_WindowEx_MaxHeight(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.MaxHeight;
        }
        private void set_167_WindowEx_MaxHeight(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.MaxHeight = (global::System.Double)Value;
        }
#pragma warning disable 0618  //   Warning on Deprecated usage
        private object get_168_WindowEx_Backdrop(object instance)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            return that.Backdrop;
        }
        private void set_168_WindowEx_Backdrop(object instance, object Value)
        {
            var that = (global::WinUIEx.WindowEx)instance;
            that.Backdrop = (global::WinUIEx.SystemBackdrop)Value;
        }
#pragma warning restore 0618
        private object get_169_NavigationView_IsTitleBarAutoPaddingEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsTitleBarAutoPaddingEnabled;
        }
        private void set_169_NavigationView_IsTitleBarAutoPaddingEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsTitleBarAutoPaddingEnabled = (global::System.Boolean)Value;
        }
        private object get_170_NavigationView_AlwaysShowHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AlwaysShowHeader;
        }
        private void set_170_NavigationView_AlwaysShowHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AlwaysShowHeader = (global::System.Boolean)Value;
        }
        private object get_171_NavigationView_PaneDisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneDisplayMode;
        }
        private void set_171_NavigationView_PaneDisplayMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneDisplayMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode)Value;
        }
        private object get_172_NavigationView_IsPaneOpen(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneOpen;
        }
        private void set_172_NavigationView_IsPaneOpen(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneOpen = (global::System.Boolean)Value;
        }
        private object get_173_NavigationView_CompactModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactModeThresholdWidth;
        }
        private void set_173_NavigationView_CompactModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_174_NavigationView_ExpandedModeThresholdWidth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ExpandedModeThresholdWidth;
        }
        private void set_174_NavigationView_ExpandedModeThresholdWidth(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ExpandedModeThresholdWidth = (global::System.Double)Value;
        }
        private object get_175_NavigationView_OpenPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OpenPaneLength;
        }
        private void set_175_NavigationView_OpenPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OpenPaneLength = (global::System.Double)Value;
        }
        private object get_176_NavigationView_IsSettingsVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsSettingsVisible;
        }
        private void set_176_NavigationView_IsSettingsVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsSettingsVisible = (global::System.Boolean)Value;
        }
        private object get_177_NavigationView_IsBackButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackButtonVisible;
        }
        private void set_177_NavigationView_IsBackButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackButtonVisible = (global::Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible)Value;
        }
        private object get_178_NavigationView_IsBackEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsBackEnabled;
        }
        private void set_178_NavigationView_IsBackEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsBackEnabled = (global::System.Boolean)Value;
        }
        private object get_179_NavigationView_IsPaneToggleButtonVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneToggleButtonVisible;
        }
        private void set_179_NavigationView_IsPaneToggleButtonVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneToggleButtonVisible = (global::System.Boolean)Value;
        }
        private object get_180_NavigationView_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItems;
        }
        private object get_181_NavigationView_FooterMenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItems;
        }
        private object get_182_NavigationView_AutoSuggestBox(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.AutoSuggestBox;
        }
        private void set_182_NavigationView_AutoSuggestBox(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.AutoSuggestBox = (global::Microsoft.UI.Xaml.Controls.AutoSuggestBox)Value;
        }
        private object get_183_NavigationView_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.CompactPaneLength;
        }
        private void set_183_NavigationView_CompactPaneLength(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.CompactPaneLength = (global::System.Double)Value;
        }
        private object get_184_NavigationView_ContentOverlay(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ContentOverlay;
        }
        private void set_184_NavigationView_ContentOverlay(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ContentOverlay = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_185_NavigationView_DisplayMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.DisplayMode;
        }
        private object get_186_NavigationView_FooterMenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.FooterMenuItemsSource;
        }
        private void set_186_NavigationView_FooterMenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.FooterMenuItemsSource = (global::System.Object)Value;
        }
        private object get_187_NavigationView_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.Header;
        }
        private void set_187_NavigationView_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_188_NavigationView_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.HeaderTemplate;
        }
        private void set_188_NavigationView_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_189_NavigationView_IsPaneVisible(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.IsPaneVisible;
        }
        private void set_189_NavigationView_IsPaneVisible(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.IsPaneVisible = (global::System.Boolean)Value;
        }
        private object get_190_NavigationView_MenuItemContainerStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyle;
        }
        private void set_190_NavigationView_MenuItemContainerStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_191_NavigationView_MenuItemContainerStyleSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemContainerStyleSelector;
        }
        private void set_191_NavigationView_MenuItemContainerStyleSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemContainerStyleSelector = (global::Microsoft.UI.Xaml.Controls.StyleSelector)Value;
        }
        private object get_192_NavigationView_MenuItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplate;
        }
        private void set_192_NavigationView_MenuItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_193_NavigationView_MenuItemTemplateSelector(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemTemplateSelector;
        }
        private void set_193_NavigationView_MenuItemTemplateSelector(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemTemplateSelector = (global::Microsoft.UI.Xaml.Controls.DataTemplateSelector)Value;
        }
        private object get_194_NavigationView_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.MenuItemsSource;
        }
        private void set_194_NavigationView_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_195_NavigationView_OverflowLabelMode(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.OverflowLabelMode;
        }
        private void set_195_NavigationView_OverflowLabelMode(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.OverflowLabelMode = (global::Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode)Value;
        }
        private object get_196_NavigationView_PaneCustomContent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneCustomContent;
        }
        private void set_196_NavigationView_PaneCustomContent(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneCustomContent = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_197_NavigationView_PaneFooter(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneFooter;
        }
        private void set_197_NavigationView_PaneFooter(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneFooter = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_198_NavigationView_PaneHeader(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneHeader;
        }
        private void set_198_NavigationView_PaneHeader(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneHeader = (global::Microsoft.UI.Xaml.UIElement)Value;
        }
        private object get_199_NavigationView_PaneTitle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneTitle;
        }
        private void set_199_NavigationView_PaneTitle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneTitle = (global::System.String)Value;
        }
        private object get_200_NavigationView_PaneToggleButtonStyle(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.PaneToggleButtonStyle;
        }
        private void set_200_NavigationView_PaneToggleButtonStyle(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.PaneToggleButtonStyle = (global::Microsoft.UI.Xaml.Style)Value;
        }
        private object get_201_NavigationView_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectedItem;
        }
        private void set_201_NavigationView_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_202_NavigationView_SelectionFollowsFocus(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SelectionFollowsFocus;
        }
        private void set_202_NavigationView_SelectionFollowsFocus(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.SelectionFollowsFocus = (global::Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus)Value;
        }
        private object get_203_NavigationView_SettingsItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.SettingsItem;
        }
        private object get_204_NavigationView_ShoulderNavigationEnabled(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.ShoulderNavigationEnabled;
        }
        private void set_204_NavigationView_ShoulderNavigationEnabled(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            that.ShoulderNavigationEnabled = (global::Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled)Value;
        }
        private object get_205_NavigationView_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationView)instance;
            return that.TemplateSettings;
        }
        private object get_206_NavigationViewItem_Icon(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.Icon;
        }
        private void set_206_NavigationViewItem_Icon(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_207_NavigationViewItem_SelectsOnInvoked(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.SelectsOnInvoked;
        }
        private void set_207_NavigationViewItem_SelectsOnInvoked(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.SelectsOnInvoked = (global::System.Boolean)Value;
        }
        private object get_208_NavigationViewItem_InfoBadge(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.InfoBadge;
        }
        private void set_208_NavigationViewItem_InfoBadge(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.InfoBadge = (global::Microsoft.UI.Xaml.Controls.InfoBadge)Value;
        }
        private object get_209_NavigationViewItem_CompactPaneLength(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.CompactPaneLength;
        }
        private object get_210_NavigationViewItem_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_210_NavigationViewItem_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_211_NavigationViewItem_IsChildSelected(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsChildSelected;
        }
        private void set_211_NavigationViewItem_IsChildSelected(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsChildSelected = (global::System.Boolean)Value;
        }
        private object get_212_NavigationViewItem_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.IsExpanded;
        }
        private void set_212_NavigationViewItem_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_213_NavigationViewItem_MenuItems(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItems;
        }
        private object get_214_NavigationViewItem_MenuItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            return that.MenuItemsSource;
        }
        private void set_214_NavigationViewItem_MenuItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.NavigationViewItem)instance;
            that.MenuItemsSource = (global::System.Object)Value;
        }
        private object get_215_InfoBadge_Value(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.Value;
        }
        private void set_215_InfoBadge_Value(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            that.Value = (global::System.Int32)Value;
        }
        private object get_216_InfoBadge_IconSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.IconSource;
        }
        private void set_216_InfoBadge_IconSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            that.IconSource = (global::Microsoft.UI.Xaml.Controls.IconSource)Value;
        }
        private object get_217_InfoBadge_TemplateSettings(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.InfoBadge)instance;
            return that.TemplateSettings;
        }
        private object get_218_MainWindow_AppWindow(object instance)
        {
            var that = (global::GMTool.MainWindow)instance;
            return that.AppWindow;
        }
        private object get_219_SegmentedItem_Icon(object instance)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SegmentedItem)instance;
            return that.Icon;
        }
        private void set_219_SegmentedItem_Icon(object instance, object Value)
        {
            var that = (global::CommunityToolkit.WinUI.Controls.SegmentedItem)instance;
            that.Icon = (global::Microsoft.UI.Xaml.Controls.IconElement)Value;
        }
        private object get_220_RadioButtons_Items(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.Items;
        }
        private object get_221_RadioButtons_Header(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.Header;
        }
        private void set_221_RadioButtons_Header(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.Header = (global::System.Object)Value;
        }
        private object get_222_RadioButtons_HeaderTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.HeaderTemplate;
        }
        private void set_222_RadioButtons_HeaderTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.HeaderTemplate = (global::Microsoft.UI.Xaml.DataTemplate)Value;
        }
        private object get_223_RadioButtons_ItemTemplate(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.ItemTemplate;
        }
        private void set_223_RadioButtons_ItemTemplate(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.ItemTemplate = (global::System.Object)Value;
        }
        private object get_224_RadioButtons_ItemsSource(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.ItemsSource;
        }
        private void set_224_RadioButtons_ItemsSource(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.ItemsSource = (global::System.Object)Value;
        }
        private object get_225_RadioButtons_MaxColumns(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.MaxColumns;
        }
        private void set_225_RadioButtons_MaxColumns(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.MaxColumns = (global::System.Int32)Value;
        }
        private object get_226_RadioButtons_SelectedIndex(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.SelectedIndex;
        }
        private void set_226_RadioButtons_SelectedIndex(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.SelectedIndex = (global::System.Int32)Value;
        }
        private object get_227_RadioButtons_SelectedItem(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            return that.SelectedItem;
        }
        private void set_227_RadioButtons_SelectedItem(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.RadioButtons)instance;
            that.SelectedItem = (global::System.Object)Value;
        }
        private object get_228_TreeViewNode_Children(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Children;
        }
        private object get_229_TreeViewNode_Content(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Content;
        }
        private void set_229_TreeViewNode_Content(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.Content = (global::System.Object)Value;
        }
        private object get_230_TreeViewNode_Depth(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Depth;
        }
        private object get_231_TreeViewNode_HasChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasChildren;
        }
        private object get_232_TreeViewNode_HasUnrealizedChildren(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.HasUnrealizedChildren;
        }
        private void set_232_TreeViewNode_HasUnrealizedChildren(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.HasUnrealizedChildren = (global::System.Boolean)Value;
        }
        private object get_233_TreeViewNode_IsExpanded(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.IsExpanded;
        }
        private void set_233_TreeViewNode_IsExpanded(object instance, object Value)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            that.IsExpanded = (global::System.Boolean)Value;
        }
        private object get_234_TreeViewNode_Parent(object instance)
        {
            var that = (global::Microsoft.UI.Xaml.Controls.TreeViewNode)instance;
            return that.Parent;
        }

        private global::Microsoft.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::GMTool.GMTool_XamlTypeInfo.XamlMember xamlMember = null;
            global::GMTool.GMTool_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Microsoft.UI.Xaml.Controls.XamlControlsResources.UseCompactResources":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.XamlControlsResources");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "UseCompactResources", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_0_XamlControlsResources_UseCompactResources;
                xamlMember.Setter = set_0_XamlControlsResources_UseCompactResources;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.IsActive":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsActive", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_1_ProgressRing_IsActive;
                xamlMember.Setter = set_1_ProgressRing_IsActive;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.IsIndeterminate":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsIndeterminate", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_2_ProgressRing_IsIndeterminate;
                xamlMember.Setter = set_2_ProgressRing_IsIndeterminate;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Maximum":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_3_ProgressRing_Maximum;
                xamlMember.Setter = set_3_ProgressRing_Maximum;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Minimum":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_4_ProgressRing_Minimum;
                xamlMember.Setter = set_4_ProgressRing_Minimum;
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.TemplateSettings":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ProgressRingTemplateSettings");
                xamlMember.Getter = get_5_ProgressRing_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.ProgressRing.Value":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.ProgressRing");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_6_ProgressRing_Value;
                xamlMember.Setter = set_6_ProgressRing_Value;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.CodeFontFamily":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CodeFontFamily", "Microsoft.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_7_MarkdownTextBlock_CodeFontFamily;
                xamlMember.Setter = set_7_MarkdownTextBlock_CodeFontFamily;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.InlineCodeFontFamily":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "InlineCodeFontFamily", "Microsoft.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_8_MarkdownTextBlock_InlineCodeFontFamily;
                xamlMember.Setter = set_8_MarkdownTextBlock_InlineCodeFontFamily;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.CodeBackground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CodeBackground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_9_MarkdownTextBlock_CodeBackground;
                xamlMember.Setter = set_9_MarkdownTextBlock_CodeBackground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.CodeForeground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CodeForeground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_10_MarkdownTextBlock_CodeForeground;
                xamlMember.Setter = set_10_MarkdownTextBlock_CodeForeground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.InlineCodeBackground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "InlineCodeBackground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_11_MarkdownTextBlock_InlineCodeBackground;
                xamlMember.Setter = set_11_MarkdownTextBlock_InlineCodeBackground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.InlineCodeForeground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "InlineCodeForeground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_12_MarkdownTextBlock_InlineCodeForeground;
                xamlMember.Setter = set_12_MarkdownTextBlock_InlineCodeForeground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header1FontSize":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header1FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_13_MarkdownTextBlock_Header1FontSize;
                xamlMember.Setter = set_13_MarkdownTextBlock_Header1FontSize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header2FontSize":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header2FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_14_MarkdownTextBlock_Header2FontSize;
                xamlMember.Setter = set_14_MarkdownTextBlock_Header2FontSize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header3FontSize":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header3FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_15_MarkdownTextBlock_Header3FontSize;
                xamlMember.Setter = set_15_MarkdownTextBlock_Header3FontSize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header4FontSize":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header4FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_MarkdownTextBlock_Header4FontSize;
                xamlMember.Setter = set_16_MarkdownTextBlock_Header4FontSize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header5FontSize":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header5FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_MarkdownTextBlock_Header5FontSize;
                xamlMember.Setter = set_17_MarkdownTextBlock_Header5FontSize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header6FontSize":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header6FontSize", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_MarkdownTextBlock_Header6FontSize;
                xamlMember.Setter = set_18_MarkdownTextBlock_Header6FontSize;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header1FontWeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header1FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_19_MarkdownTextBlock_Header1FontWeight;
                xamlMember.Setter = set_19_MarkdownTextBlock_Header1FontWeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header2FontWeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header2FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_20_MarkdownTextBlock_Header2FontWeight;
                xamlMember.Setter = set_20_MarkdownTextBlock_Header2FontWeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header3FontWeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header3FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_21_MarkdownTextBlock_Header3FontWeight;
                xamlMember.Setter = set_21_MarkdownTextBlock_Header3FontWeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header4FontWeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header4FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_22_MarkdownTextBlock_Header4FontWeight;
                xamlMember.Setter = set_22_MarkdownTextBlock_Header4FontWeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header5FontWeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header5FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_23_MarkdownTextBlock_Header5FontWeight;
                xamlMember.Setter = set_23_MarkdownTextBlock_Header5FontWeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header6FontWeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header6FontWeight", "Windows.UI.Text.FontWeight");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_24_MarkdownTextBlock_Header6FontWeight;
                xamlMember.Setter = set_24_MarkdownTextBlock_Header6FontWeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Text":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_25_MarkdownTextBlock_Text;
                xamlMember.Setter = set_25_MarkdownTextBlock_Text;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.TextWrapping":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TextWrapping", "Microsoft.UI.Xaml.TextWrapping");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_26_MarkdownTextBlock_TextWrapping;
                xamlMember.Setter = set_26_MarkdownTextBlock_TextWrapping;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.IsTextSelectionEnabled":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsTextSelectionEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_27_MarkdownTextBlock_IsTextSelectionEnabled;
                xamlMember.Setter = set_27_MarkdownTextBlock_IsTextSelectionEnabled;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.ImageMaxWidth":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ImageMaxWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_28_MarkdownTextBlock_ImageMaxWidth;
                xamlMember.Setter = set_28_MarkdownTextBlock_ImageMaxWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.ImageMaxHeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ImageMaxHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_29_MarkdownTextBlock_ImageMaxHeight;
                xamlMember.Setter = set_29_MarkdownTextBlock_ImageMaxHeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.ImageStretch":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ImageStretch", "Microsoft.UI.Xaml.Media.Stretch");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_30_MarkdownTextBlock_ImageStretch;
                xamlMember.Setter = set_30_MarkdownTextBlock_ImageStretch;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.CodeBorderThickness":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CodeBorderThickness", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_31_MarkdownTextBlock_CodeBorderThickness;
                xamlMember.Setter = set_31_MarkdownTextBlock_CodeBorderThickness;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.InlineCodeBorderThickness":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "InlineCodeBorderThickness", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_32_MarkdownTextBlock_InlineCodeBorderThickness;
                xamlMember.Setter = set_32_MarkdownTextBlock_InlineCodeBorderThickness;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.InlineCodePadding":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "InlineCodePadding", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_33_MarkdownTextBlock_InlineCodePadding;
                xamlMember.Setter = set_33_MarkdownTextBlock_InlineCodePadding;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.InlineCodeMargin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "InlineCodeMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_34_MarkdownTextBlock_InlineCodeMargin;
                xamlMember.Setter = set_34_MarkdownTextBlock_InlineCodeMargin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.CodeMargin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CodeMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_35_MarkdownTextBlock_CodeMargin;
                xamlMember.Setter = set_35_MarkdownTextBlock_CodeMargin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.CodePadding":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CodePadding", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_36_MarkdownTextBlock_CodePadding;
                xamlMember.Setter = set_36_MarkdownTextBlock_CodePadding;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header1Margin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header1Margin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_37_MarkdownTextBlock_Header1Margin;
                xamlMember.Setter = set_37_MarkdownTextBlock_Header1Margin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header2Margin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header2Margin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_38_MarkdownTextBlock_Header2Margin;
                xamlMember.Setter = set_38_MarkdownTextBlock_Header2Margin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header3Margin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header3Margin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_39_MarkdownTextBlock_Header3Margin;
                xamlMember.Setter = set_39_MarkdownTextBlock_Header3Margin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header4Margin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header4Margin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_40_MarkdownTextBlock_Header4Margin;
                xamlMember.Setter = set_40_MarkdownTextBlock_Header4Margin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header5Margin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header5Margin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_41_MarkdownTextBlock_Header5Margin;
                xamlMember.Setter = set_41_MarkdownTextBlock_Header5Margin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header6Margin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header6Margin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_42_MarkdownTextBlock_Header6Margin;
                xamlMember.Setter = set_42_MarkdownTextBlock_Header6Margin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.HorizontalRuleMargin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HorizontalRuleMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_43_MarkdownTextBlock_HorizontalRuleMargin;
                xamlMember.Setter = set_43_MarkdownTextBlock_HorizontalRuleMargin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.HorizontalRuleThickness":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HorizontalRuleThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_44_MarkdownTextBlock_HorizontalRuleThickness;
                xamlMember.Setter = set_44_MarkdownTextBlock_HorizontalRuleThickness;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.ListMargin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ListMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_45_MarkdownTextBlock_ListMargin;
                xamlMember.Setter = set_45_MarkdownTextBlock_ListMargin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.ListGutterWidth":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ListGutterWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_46_MarkdownTextBlock_ListGutterWidth;
                xamlMember.Setter = set_46_MarkdownTextBlock_ListGutterWidth;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.ListBulletSpacing":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ListBulletSpacing", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_47_MarkdownTextBlock_ListBulletSpacing;
                xamlMember.Setter = set_47_MarkdownTextBlock_ListBulletSpacing;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.ParagraphMargin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ParagraphMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_48_MarkdownTextBlock_ParagraphMargin;
                xamlMember.Setter = set_48_MarkdownTextBlock_ParagraphMargin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.ParagraphLineHeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ParagraphLineHeight", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_49_MarkdownTextBlock_ParagraphLineHeight;
                xamlMember.Setter = set_49_MarkdownTextBlock_ParagraphLineHeight;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.QuoteBorderThickness":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "QuoteBorderThickness", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_50_MarkdownTextBlock_QuoteBorderThickness;
                xamlMember.Setter = set_50_MarkdownTextBlock_QuoteBorderThickness;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.QuoteMargin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "QuoteMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_51_MarkdownTextBlock_QuoteMargin;
                xamlMember.Setter = set_51_MarkdownTextBlock_QuoteMargin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.QuotePadding":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "QuotePadding", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_52_MarkdownTextBlock_QuotePadding;
                xamlMember.Setter = set_52_MarkdownTextBlock_QuotePadding;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.YamlBorderThickness":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "YamlBorderThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_53_MarkdownTextBlock_YamlBorderThickness;
                xamlMember.Setter = set_53_MarkdownTextBlock_YamlBorderThickness;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.TableBorderThickness":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TableBorderThickness", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_54_MarkdownTextBlock_TableBorderThickness;
                xamlMember.Setter = set_54_MarkdownTextBlock_TableBorderThickness;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.TableCellPadding":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TableCellPadding", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_55_MarkdownTextBlock_TableCellPadding;
                xamlMember.Setter = set_55_MarkdownTextBlock_TableCellPadding;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.TableMargin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TableMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_56_MarkdownTextBlock_TableMargin;
                xamlMember.Setter = set_56_MarkdownTextBlock_TableMargin;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.UseSyntaxHighlighting":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "UseSyntaxHighlighting", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_57_MarkdownTextBlock_UseSyntaxHighlighting;
                xamlMember.Setter = set_57_MarkdownTextBlock_UseSyntaxHighlighting;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.WrapCodeBlock":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "WrapCodeBlock", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_58_MarkdownTextBlock_WrapCodeBlock;
                xamlMember.Setter = set_58_MarkdownTextBlock_WrapCodeBlock;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.CodeStyling":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CodeStyling", "ColorCode.Styling.StyleDictionary");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_59_MarkdownTextBlock_CodeStyling;
                xamlMember.Setter = set_59_MarkdownTextBlock_CodeStyling;
                break;
            case "ColorCode.Styling.Style.Background":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ColorCode.Styling.Style");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Background", "String");
                xamlMember.Getter = get_60_Style_Background;
                xamlMember.Setter = set_60_Style_Background;
                break;
            case "ColorCode.Styling.Style.Foreground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ColorCode.Styling.Style");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Foreground", "String");
                xamlMember.Getter = get_61_Style_Foreground;
                xamlMember.Setter = set_61_Style_Foreground;
                break;
            case "ColorCode.Styling.Style.ScopeName":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ColorCode.Styling.Style");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ScopeName", "String");
                xamlMember.Getter = get_62_Style_ScopeName;
                xamlMember.Setter = set_62_Style_ScopeName;
                break;
            case "ColorCode.Styling.Style.ReferenceName":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ColorCode.Styling.Style");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ReferenceName", "String");
                xamlMember.Getter = get_63_Style_ReferenceName;
                xamlMember.Setter = set_63_Style_ReferenceName;
                break;
            case "ColorCode.Styling.Style.Italic":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ColorCode.Styling.Style");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Italic", "Boolean");
                xamlMember.Getter = get_64_Style_Italic;
                xamlMember.Setter = set_64_Style_Italic;
                break;
            case "ColorCode.Styling.Style.Bold":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("ColorCode.Styling.Style");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Bold", "Boolean");
                xamlMember.Getter = get_65_Style_Bold;
                xamlMember.Setter = set_65_Style_Bold;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.LinkForeground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "LinkForeground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_66_MarkdownTextBlock_LinkForeground;
                xamlMember.Setter = set_66_MarkdownTextBlock_LinkForeground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.CodeBorderBrush":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CodeBorderBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_67_MarkdownTextBlock_CodeBorderBrush;
                xamlMember.Setter = set_67_MarkdownTextBlock_CodeBorderBrush;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.InlineCodeBorderBrush":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "InlineCodeBorderBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_68_MarkdownTextBlock_InlineCodeBorderBrush;
                xamlMember.Setter = set_68_MarkdownTextBlock_InlineCodeBorderBrush;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.EmojiFontFamily":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "EmojiFontFamily", "Microsoft.UI.Xaml.Media.FontFamily");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_69_MarkdownTextBlock_EmojiFontFamily;
                xamlMember.Setter = set_69_MarkdownTextBlock_EmojiFontFamily;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header1Foreground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header1Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_70_MarkdownTextBlock_Header1Foreground;
                xamlMember.Setter = set_70_MarkdownTextBlock_Header1Foreground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header2Foreground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header2Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_71_MarkdownTextBlock_Header2Foreground;
                xamlMember.Setter = set_71_MarkdownTextBlock_Header2Foreground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header3Foreground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header3Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_72_MarkdownTextBlock_Header3Foreground;
                xamlMember.Setter = set_72_MarkdownTextBlock_Header3Foreground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header4Foreground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header4Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_73_MarkdownTextBlock_Header4Foreground;
                xamlMember.Setter = set_73_MarkdownTextBlock_Header4Foreground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header5Foreground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header5Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_74_MarkdownTextBlock_Header5Foreground;
                xamlMember.Setter = set_74_MarkdownTextBlock_Header5Foreground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.Header6Foreground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header6Foreground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_75_MarkdownTextBlock_Header6Foreground;
                xamlMember.Setter = set_75_MarkdownTextBlock_Header6Foreground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.HorizontalRuleBrush":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HorizontalRuleBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_76_MarkdownTextBlock_HorizontalRuleBrush;
                xamlMember.Setter = set_76_MarkdownTextBlock_HorizontalRuleBrush;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.QuoteBackground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "QuoteBackground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_77_MarkdownTextBlock_QuoteBackground;
                xamlMember.Setter = set_77_MarkdownTextBlock_QuoteBackground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.QuoteBorderBrush":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "QuoteBorderBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_78_MarkdownTextBlock_QuoteBorderBrush;
                xamlMember.Setter = set_78_MarkdownTextBlock_QuoteBorderBrush;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.QuoteForeground":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "QuoteForeground", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_79_MarkdownTextBlock_QuoteForeground;
                xamlMember.Setter = set_79_MarkdownTextBlock_QuoteForeground;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.TableBorderBrush":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TableBorderBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_80_MarkdownTextBlock_TableBorderBrush;
                xamlMember.Setter = set_80_MarkdownTextBlock_TableBorderBrush;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.YamlBorderBrush":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "YamlBorderBrush", "Microsoft.UI.Xaml.Media.Brush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_81_MarkdownTextBlock_YamlBorderBrush;
                xamlMember.Setter = set_81_MarkdownTextBlock_YamlBorderBrush;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.UriPrefix":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "UriPrefix", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_82_MarkdownTextBlock_UriPrefix;
                xamlMember.Setter = set_82_MarkdownTextBlock_UriPrefix;
                break;
            case "CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock.SchemeList":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.UI.Controls.MarkdownTextBlock");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SchemeList", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_83_MarkdownTextBlock_SchemeList;
                xamlMember.Setter = set_83_MarkdownTextBlock_SchemeList;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItemBase.IsSelected":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItemBase");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_84_NavigationViewItemBase_IsSelected;
                xamlMember.Setter = set_84_NavigationViewItemBase_IsSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Header":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_85_NumberBox_Header;
                xamlMember.Setter = set_85_NumberBox_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.AcceptsExpression":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "AcceptsExpression", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_86_NumberBox_AcceptsExpression;
                xamlMember.Setter = set_86_NumberBox_AcceptsExpression;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Minimum":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Minimum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_87_NumberBox_Minimum;
                xamlMember.Setter = set_87_NumberBox_Minimum;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Value":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Value", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_88_NumberBox_Value;
                xamlMember.Setter = set_88_NumberBox_Value;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.PlaceholderText":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PlaceholderText", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_89_NumberBox_PlaceholderText;
                xamlMember.Setter = set_89_NumberBox_PlaceholderText;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Description":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Description", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_90_NumberBox_Description;
                xamlMember.Setter = set_90_NumberBox_Description;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.HeaderTemplate":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_91_NumberBox_HeaderTemplate;
                xamlMember.Setter = set_91_NumberBox_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.IsWrapEnabled":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsWrapEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_92_NumberBox_IsWrapEnabled;
                xamlMember.Setter = set_92_NumberBox_IsWrapEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.LargeChange":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "LargeChange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_93_NumberBox_LargeChange;
                xamlMember.Setter = set_93_NumberBox_LargeChange;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Maximum":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Maximum", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_94_NumberBox_Maximum;
                xamlMember.Setter = set_94_NumberBox_Maximum;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.NumberFormatter":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "NumberFormatter", "Windows.Globalization.NumberFormatting.INumberFormatter2");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_95_NumberBox_NumberFormatter;
                xamlMember.Setter = set_95_NumberBox_NumberFormatter;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.PreventKeyboardDisplayOnProgrammaticFocus":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PreventKeyboardDisplayOnProgrammaticFocus", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_96_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus;
                xamlMember.Setter = set_96_NumberBox_PreventKeyboardDisplayOnProgrammaticFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SelectionFlyout":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SelectionFlyout", "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_97_NumberBox_SelectionFlyout;
                xamlMember.Setter = set_97_NumberBox_SelectionFlyout;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SelectionHighlightColor":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SelectionHighlightColor", "Microsoft.UI.Xaml.Media.SolidColorBrush");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_98_NumberBox_SelectionHighlightColor;
                xamlMember.Setter = set_98_NumberBox_SelectionHighlightColor;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SmallChange":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SmallChange", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_99_NumberBox_SmallChange;
                xamlMember.Setter = set_99_NumberBox_SmallChange;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.SpinButtonPlacementMode":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SpinButtonPlacementMode", "Microsoft.UI.Xaml.Controls.NumberBoxSpinButtonPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_100_NumberBox_SpinButtonPlacementMode;
                xamlMember.Setter = set_100_NumberBox_SpinButtonPlacementMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.Text":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Text", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_101_NumberBox_Text;
                xamlMember.Setter = set_101_NumberBox_Text;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.TextReadingOrder":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TextReadingOrder", "Microsoft.UI.Xaml.TextReadingOrder");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_102_NumberBox_TextReadingOrder;
                xamlMember.Setter = set_102_NumberBox_TextReadingOrder;
                break;
            case "Microsoft.UI.Xaml.Controls.NumberBox.ValidationMode":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NumberBox");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ValidationMode", "Microsoft.UI.Xaml.Controls.NumberBoxValidationMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_103_NumberBox_ValidationMode;
                xamlMember.Setter = set_103_NumberBox_ValidationMode;
                break;
            case "Microsoft.UI.Xaml.Controls.SplitButton.Flyout":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.SplitButton");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Flyout", "Microsoft.UI.Xaml.Controls.Primitives.FlyoutBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_104_SplitButton_Flyout;
                xamlMember.Setter = set_104_SplitButton_Flyout;
                break;
            case "Microsoft.UI.Xaml.Controls.SplitButton.Command":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.SplitButton");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_105_SplitButton_Command;
                xamlMember.Setter = set_105_SplitButton_Command;
                break;
            case "Microsoft.UI.Xaml.Controls.SplitButton.CommandParameter":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.SplitButton");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_106_SplitButton_CommandParameter;
                xamlMember.Setter = set_106_SplitButton_CommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Target":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Target", "Microsoft.UI.Xaml.FrameworkElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_107_TeachingTip_Target;
                xamlMember.Setter = set_107_TeachingTip_Target;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Title":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_108_TeachingTip_Title;
                xamlMember.Setter = set_108_TeachingTip_Title;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IsLightDismissEnabled":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsLightDismissEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_109_TeachingTip_IsLightDismissEnabled;
                xamlMember.Setter = set_109_TeachingTip_IsLightDismissEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.PreferredPlacement":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PreferredPlacement", "Microsoft.UI.Xaml.Controls.TeachingTipPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_110_TeachingTip_PreferredPlacement;
                xamlMember.Setter = set_110_TeachingTip_PreferredPlacement;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonContent":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ActionButtonContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_111_TeachingTip_ActionButtonContent;
                xamlMember.Setter = set_111_TeachingTip_ActionButtonContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonStyle":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ActionButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_112_TeachingTip_ActionButtonStyle;
                xamlMember.Setter = set_112_TeachingTip_ActionButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonContent":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CloseButtonContent", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_113_TeachingTip_CloseButtonContent;
                xamlMember.Setter = set_113_TeachingTip_CloseButtonContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonCommand":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ActionButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_114_TeachingTip_ActionButtonCommand;
                xamlMember.Setter = set_114_TeachingTip_ActionButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ActionButtonCommandParameter":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ActionButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_115_TeachingTip_ActionButtonCommandParameter;
                xamlMember.Setter = set_115_TeachingTip_ActionButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonCommand":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CloseButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_116_TeachingTip_CloseButtonCommand;
                xamlMember.Setter = set_116_TeachingTip_CloseButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonCommandParameter":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CloseButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_117_TeachingTip_CloseButtonCommandParameter;
                xamlMember.Setter = set_117_TeachingTip_CloseButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.CloseButtonStyle":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CloseButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_118_TeachingTip_CloseButtonStyle;
                xamlMember.Setter = set_118_TeachingTip_CloseButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.HeroContent":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HeroContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_119_TeachingTip_HeroContent;
                xamlMember.Setter = set_119_TeachingTip_HeroContent;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.HeroContentPlacement":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HeroContentPlacement", "Microsoft.UI.Xaml.Controls.TeachingTipHeroContentPlacementMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_120_TeachingTip_HeroContentPlacement;
                xamlMember.Setter = set_120_TeachingTip_HeroContentPlacement;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IconSource":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_121_TeachingTip_IconSource;
                xamlMember.Setter = set_121_TeachingTip_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.IsOpen":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_122_TeachingTip_IsOpen;
                xamlMember.Setter = set_122_TeachingTip_IsOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.PlacementMargin":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PlacementMargin", "Microsoft.UI.Xaml.Thickness");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_123_TeachingTip_PlacementMargin;
                xamlMember.Setter = set_123_TeachingTip_PlacementMargin;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.ShouldConstrainToRootBounds":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ShouldConstrainToRootBounds", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_124_TeachingTip_ShouldConstrainToRootBounds;
                xamlMember.Setter = set_124_TeachingTip_ShouldConstrainToRootBounds;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.Subtitle":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Subtitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_125_TeachingTip_Subtitle;
                xamlMember.Setter = set_125_TeachingTip_Subtitle;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.TailVisibility":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TailVisibility", "Microsoft.UI.Xaml.Controls.TeachingTipTailVisibility");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_126_TeachingTip_TailVisibility;
                xamlMember.Setter = set_126_TeachingTip_TailVisibility;
                break;
            case "Microsoft.UI.Xaml.Controls.TeachingTip.TemplateSettings":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TeachingTip");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.TeachingTipTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_127_TeachingTip_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Content":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_128_InfoBar_Content;
                xamlMember.Setter = set_128_InfoBar_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Title":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_129_InfoBar_Title;
                xamlMember.Setter = set_129_InfoBar_Title;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Message":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Message", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_130_InfoBar_Message;
                xamlMember.Setter = set_130_InfoBar_Message;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsIconVisible":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsIconVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_131_InfoBar_IsIconVisible;
                xamlMember.Setter = set_131_InfoBar_IsIconVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.Severity":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Severity", "Microsoft.UI.Xaml.Controls.InfoBarSeverity");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_132_InfoBar_Severity;
                xamlMember.Setter = set_132_InfoBar_Severity;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsClosable":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsClosable", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_133_InfoBar_IsClosable;
                xamlMember.Setter = set_133_InfoBar_IsClosable;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IsOpen":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_134_InfoBar_IsOpen;
                xamlMember.Setter = set_134_InfoBar_IsOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.ContentTemplate":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ContentTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_135_InfoBar_ContentTemplate;
                xamlMember.Setter = set_135_InfoBar_ContentTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.ActionButton":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ActionButton", "Microsoft.UI.Xaml.Controls.Primitives.ButtonBase");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_136_InfoBar_ActionButton;
                xamlMember.Setter = set_136_InfoBar_ActionButton;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommand":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CloseButtonCommand", "System.Windows.Input.ICommand");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_137_InfoBar_CloseButtonCommand;
                xamlMember.Setter = set_137_InfoBar_CloseButtonCommand;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonCommandParameter":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CloseButtonCommandParameter", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_138_InfoBar_CloseButtonCommandParameter;
                xamlMember.Setter = set_138_InfoBar_CloseButtonCommandParameter;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.CloseButtonStyle":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CloseButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_139_InfoBar_CloseButtonStyle;
                xamlMember.Setter = set_139_InfoBar_CloseButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.IconSource":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_140_InfoBar_IconSource;
                xamlMember.Setter = set_140_InfoBar_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBar.TemplateSettings":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBar");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.InfoBarTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_141_InfoBar_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.IsExpanded":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_142_Expander_IsExpanded;
                xamlMember.Setter = set_142_Expander_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.ExpandDirection":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ExpandDirection", "Microsoft.UI.Xaml.Controls.ExpandDirection");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_143_Expander_ExpandDirection;
                xamlMember.Setter = set_143_Expander_ExpandDirection;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.Header":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_144_Expander_Header;
                xamlMember.Setter = set_144_Expander_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplate":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_145_Expander_HeaderTemplate;
                xamlMember.Setter = set_145_Expander_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.HeaderTemplateSelector":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HeaderTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_146_Expander_HeaderTemplateSelector;
                xamlMember.Setter = set_146_Expander_HeaderTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.Expander.TemplateSettings":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.Expander");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.ExpanderTemplateSettings");
                xamlMember.Getter = get_147_Expander_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.WindowContent":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "WindowContent", "Object");
                xamlMember.Getter = get_148_WindowEx_WindowContent;
                xamlMember.Setter = set_148_WindowEx_WindowContent;
                break;
            case "WinUIEx.WindowEx.Width":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Width", "Double");
                xamlMember.Getter = get_149_WindowEx_Width;
                xamlMember.Setter = set_149_WindowEx_Width;
                break;
            case "WinUIEx.WindowEx.Height":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Height", "Double");
                xamlMember.Getter = get_150_WindowEx_Height;
                xamlMember.Setter = set_150_WindowEx_Height;
                break;
            case "WinUIEx.WindowEx.MinWidth":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MinWidth", "Double");
                xamlMember.Getter = get_151_WindowEx_MinWidth;
                xamlMember.Setter = set_151_WindowEx_MinWidth;
                break;
            case "WinUIEx.WindowEx.MinHeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MinHeight", "Double");
                xamlMember.Getter = get_152_WindowEx_MinHeight;
                xamlMember.Setter = set_152_WindowEx_MinHeight;
                break;
            case "WinUIEx.WindowEx.TaskBarIcon":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TaskBarIcon", "WinUIEx.Icon");
                xamlMember.Getter = get_153_WindowEx_TaskBarIcon;
                xamlMember.Setter = set_153_WindowEx_TaskBarIcon;
                break;
            case "WinUIEx.WindowEx.AppWindow":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "AppWindow", "Microsoft.UI.Windowing.AppWindow");
                xamlMember.Getter = get_154_WindowEx_AppWindow;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.Title":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Title", "String");
                xamlMember.Getter = get_155_WindowEx_Title;
                xamlMember.Setter = set_155_WindowEx_Title;
                break;
            case "WinUIEx.WindowEx.PersistenceId":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PersistenceId", "String");
                xamlMember.Getter = get_156_WindowEx_PersistenceId;
                xamlMember.Setter = set_156_WindowEx_PersistenceId;
                break;
            case "WinUIEx.WindowEx.IsTitleBarVisible":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsTitleBarVisible", "Boolean");
                xamlMember.Getter = get_157_WindowEx_IsTitleBarVisible;
                xamlMember.Setter = set_157_WindowEx_IsTitleBarVisible;
                break;
            case "WinUIEx.WindowEx.IsMinimizable":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsMinimizable", "Boolean");
                xamlMember.Getter = get_158_WindowEx_IsMinimizable;
                xamlMember.Setter = set_158_WindowEx_IsMinimizable;
                break;
            case "WinUIEx.WindowEx.IsMaximizable":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsMaximizable", "Boolean");
                xamlMember.Getter = get_159_WindowEx_IsMaximizable;
                xamlMember.Setter = set_159_WindowEx_IsMaximizable;
                break;
            case "WinUIEx.WindowEx.IsResizable":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsResizable", "Boolean");
                xamlMember.Getter = get_160_WindowEx_IsResizable;
                xamlMember.Setter = set_160_WindowEx_IsResizable;
                break;
            case "WinUIEx.WindowEx.WindowState":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "WindowState", "WinUIEx.WindowState");
                xamlMember.Getter = get_161_WindowEx_WindowState;
                xamlMember.Setter = set_161_WindowEx_WindowState;
                break;
            case "WinUIEx.WindowEx.IsShownInSwitchers":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsShownInSwitchers", "Boolean");
                xamlMember.Getter = get_162_WindowEx_IsShownInSwitchers;
                xamlMember.Setter = set_162_WindowEx_IsShownInSwitchers;
                break;
            case "WinUIEx.WindowEx.IsAlwaysOnTop":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsAlwaysOnTop", "Boolean");
                xamlMember.Getter = get_163_WindowEx_IsAlwaysOnTop;
                xamlMember.Setter = set_163_WindowEx_IsAlwaysOnTop;
                break;
            case "WinUIEx.WindowEx.Presenter":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Presenter", "Microsoft.UI.Windowing.AppWindowPresenter");
                xamlMember.Getter = get_164_WindowEx_Presenter;
                xamlMember.SetIsReadOnly();
                break;
            case "WinUIEx.WindowEx.PresenterKind":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PresenterKind", "Microsoft.UI.Windowing.AppWindowPresenterKind");
                xamlMember.Getter = get_165_WindowEx_PresenterKind;
                xamlMember.Setter = set_165_WindowEx_PresenterKind;
                break;
            case "WinUIEx.WindowEx.MaxWidth":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MaxWidth", "Double");
                xamlMember.Getter = get_166_WindowEx_MaxWidth;
                xamlMember.Setter = set_166_WindowEx_MaxWidth;
                break;
            case "WinUIEx.WindowEx.MaxHeight":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MaxHeight", "Double");
                xamlMember.Getter = get_167_WindowEx_MaxHeight;
                xamlMember.Setter = set_167_WindowEx_MaxHeight;
                break;
            case "WinUIEx.WindowEx.Backdrop":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinUIEx.WindowEx");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Backdrop", "WinUIEx.SystemBackdrop");
                xamlMember.Getter = get_168_WindowEx_Backdrop;
                xamlMember.Setter = set_168_WindowEx_Backdrop;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsTitleBarAutoPaddingEnabled":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsTitleBarAutoPaddingEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_169_NavigationView_IsTitleBarAutoPaddingEnabled;
                xamlMember.Setter = set_169_NavigationView_IsTitleBarAutoPaddingEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AlwaysShowHeader":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "AlwaysShowHeader", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_170_NavigationView_AlwaysShowHeader;
                xamlMember.Setter = set_170_NavigationView_AlwaysShowHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneDisplayMode":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PaneDisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewPaneDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_171_NavigationView_PaneDisplayMode;
                xamlMember.Setter = set_171_NavigationView_PaneDisplayMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneOpen":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsPaneOpen", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_172_NavigationView_IsPaneOpen;
                xamlMember.Setter = set_172_NavigationView_IsPaneOpen;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactModeThresholdWidth":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CompactModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_173_NavigationView_CompactModeThresholdWidth;
                xamlMember.Setter = set_173_NavigationView_CompactModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ExpandedModeThresholdWidth":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ExpandedModeThresholdWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_174_NavigationView_ExpandedModeThresholdWidth;
                xamlMember.Setter = set_174_NavigationView_ExpandedModeThresholdWidth;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OpenPaneLength":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "OpenPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_175_NavigationView_OpenPaneLength;
                xamlMember.Setter = set_175_NavigationView_OpenPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsSettingsVisible":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsSettingsVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_176_NavigationView_IsSettingsVisible;
                xamlMember.Setter = set_176_NavigationView_IsSettingsVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackButtonVisible":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsBackButtonVisible", "Microsoft.UI.Xaml.Controls.NavigationViewBackButtonVisible");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_177_NavigationView_IsBackButtonVisible;
                xamlMember.Setter = set_177_NavigationView_IsBackButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsBackEnabled":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsBackEnabled", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_178_NavigationView_IsBackEnabled;
                xamlMember.Setter = set_178_NavigationView_IsBackEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneToggleButtonVisible":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsPaneToggleButtonVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_179_NavigationView_IsPaneToggleButtonVisible;
                xamlMember.Setter = set_179_NavigationView_IsPaneToggleButtonVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItems":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_180_NavigationView_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItems":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "FooterMenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_181_NavigationView_FooterMenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.AutoSuggestBox":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "AutoSuggestBox", "Microsoft.UI.Xaml.Controls.AutoSuggestBox");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_182_NavigationView_AutoSuggestBox;
                xamlMember.Setter = set_182_NavigationView_AutoSuggestBox;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.CompactPaneLength":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_183_NavigationView_CompactPaneLength;
                xamlMember.Setter = set_183_NavigationView_CompactPaneLength;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ContentOverlay":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ContentOverlay", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_184_NavigationView_ContentOverlay;
                xamlMember.Setter = set_184_NavigationView_ContentOverlay;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.DisplayMode":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "DisplayMode", "Microsoft.UI.Xaml.Controls.NavigationViewDisplayMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_185_NavigationView_DisplayMode;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.FooterMenuItemsSource":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "FooterMenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_186_NavigationView_FooterMenuItemsSource;
                xamlMember.Setter = set_186_NavigationView_FooterMenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.Header":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_187_NavigationView_Header;
                xamlMember.Setter = set_187_NavigationView_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.HeaderTemplate":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_188_NavigationView_HeaderTemplate;
                xamlMember.Setter = set_188_NavigationView_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.IsPaneVisible":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsPaneVisible", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_189_NavigationView_IsPaneVisible;
                xamlMember.Setter = set_189_NavigationView_IsPaneVisible;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyle":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_190_NavigationView_MenuItemContainerStyle;
                xamlMember.Setter = set_190_NavigationView_MenuItemContainerStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemContainerStyleSelector":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MenuItemContainerStyleSelector", "Microsoft.UI.Xaml.Controls.StyleSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_191_NavigationView_MenuItemContainerStyleSelector;
                xamlMember.Setter = set_191_NavigationView_MenuItemContainerStyleSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplate":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MenuItemTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_192_NavigationView_MenuItemTemplate;
                xamlMember.Setter = set_192_NavigationView_MenuItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemTemplateSelector":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MenuItemTemplateSelector", "Microsoft.UI.Xaml.Controls.DataTemplateSelector");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_193_NavigationView_MenuItemTemplateSelector;
                xamlMember.Setter = set_193_NavigationView_MenuItemTemplateSelector;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.MenuItemsSource":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_194_NavigationView_MenuItemsSource;
                xamlMember.Setter = set_194_NavigationView_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.OverflowLabelMode":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "OverflowLabelMode", "Microsoft.UI.Xaml.Controls.NavigationViewOverflowLabelMode");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_195_NavigationView_OverflowLabelMode;
                xamlMember.Setter = set_195_NavigationView_OverflowLabelMode;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneCustomContent":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PaneCustomContent", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_196_NavigationView_PaneCustomContent;
                xamlMember.Setter = set_196_NavigationView_PaneCustomContent;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneFooter":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PaneFooter", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_197_NavigationView_PaneFooter;
                xamlMember.Setter = set_197_NavigationView_PaneFooter;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneHeader":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PaneHeader", "Microsoft.UI.Xaml.UIElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_198_NavigationView_PaneHeader;
                xamlMember.Setter = set_198_NavigationView_PaneHeader;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneTitle":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PaneTitle", "String");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_199_NavigationView_PaneTitle;
                xamlMember.Setter = set_199_NavigationView_PaneTitle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.PaneToggleButtonStyle":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "PaneToggleButtonStyle", "Microsoft.UI.Xaml.Style");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_200_NavigationView_PaneToggleButtonStyle;
                xamlMember.Setter = set_200_NavigationView_PaneToggleButtonStyle;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectedItem":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_201_NavigationView_SelectedItem;
                xamlMember.Setter = set_201_NavigationView_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SelectionFollowsFocus":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SelectionFollowsFocus", "Microsoft.UI.Xaml.Controls.NavigationViewSelectionFollowsFocus");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_202_NavigationView_SelectionFollowsFocus;
                xamlMember.Setter = set_202_NavigationView_SelectionFollowsFocus;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.SettingsItem":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SettingsItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_203_NavigationView_SettingsItem;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.ShoulderNavigationEnabled":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ShoulderNavigationEnabled", "Microsoft.UI.Xaml.Controls.NavigationViewShoulderNavigationEnabled");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_204_NavigationView_ShoulderNavigationEnabled;
                xamlMember.Setter = set_204_NavigationView_ShoulderNavigationEnabled;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationView.TemplateSettings":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationView");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.NavigationViewTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_205_NavigationView_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.Icon":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_206_NavigationViewItem_Icon;
                xamlMember.Setter = set_206_NavigationViewItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.SelectsOnInvoked":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SelectsOnInvoked", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_207_NavigationViewItem_SelectsOnInvoked;
                xamlMember.Setter = set_207_NavigationViewItem_SelectsOnInvoked;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.InfoBadge":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "InfoBadge", "Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_208_NavigationViewItem_InfoBadge;
                xamlMember.Setter = set_208_NavigationViewItem_InfoBadge;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.CompactPaneLength":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "CompactPaneLength", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_209_NavigationViewItem_CompactPaneLength;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.HasUnrealizedChildren":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_210_NavigationViewItem_HasUnrealizedChildren;
                xamlMember.Setter = set_210_NavigationViewItem_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsChildSelected":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsChildSelected", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_211_NavigationViewItem_IsChildSelected;
                xamlMember.Setter = set_211_NavigationViewItem_IsChildSelected;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.IsExpanded":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_212_NavigationViewItem_IsExpanded;
                xamlMember.Setter = set_212_NavigationViewItem_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItems":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MenuItems", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_213_NavigationViewItem_MenuItems;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.NavigationViewItem.MenuItemsSource":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.NavigationViewItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MenuItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_214_NavigationViewItem_MenuItemsSource;
                xamlMember.Setter = set_214_NavigationViewItem_MenuItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.Value":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Value", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_215_InfoBadge_Value;
                xamlMember.Setter = set_215_InfoBadge_Value;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.IconSource":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IconSource", "Microsoft.UI.Xaml.Controls.IconSource");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_216_InfoBadge_IconSource;
                xamlMember.Setter = set_216_InfoBadge_IconSource;
                break;
            case "Microsoft.UI.Xaml.Controls.InfoBadge.TemplateSettings":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.InfoBadge");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "TemplateSettings", "Microsoft.UI.Xaml.Controls.InfoBadgeTemplateSettings");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_217_InfoBadge_TemplateSettings;
                xamlMember.SetIsReadOnly();
                break;
            case "GMTool.MainWindow.AppWindow":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GMTool.MainWindow");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "AppWindow", "Microsoft.UI.Windowing.AppWindow");
                xamlMember.Getter = get_218_MainWindow_AppWindow;
                xamlMember.SetIsReadOnly();
                break;
            case "CommunityToolkit.WinUI.Controls.SegmentedItem.Icon":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("CommunityToolkit.WinUI.Controls.SegmentedItem");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Icon", "Microsoft.UI.Xaml.Controls.IconElement");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_219_SegmentedItem_Icon;
                xamlMember.Setter = set_219_SegmentedItem_Icon;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.Items":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Items", "System.Collections.Generic.IList`1<Object>");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_220_RadioButtons_Items;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.Header":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Header", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_221_RadioButtons_Header;
                xamlMember.Setter = set_221_RadioButtons_Header;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.HeaderTemplate":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HeaderTemplate", "Microsoft.UI.Xaml.DataTemplate");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_222_RadioButtons_HeaderTemplate;
                xamlMember.Setter = set_222_RadioButtons_HeaderTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.ItemTemplate":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ItemTemplate", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_223_RadioButtons_ItemTemplate;
                xamlMember.Setter = set_223_RadioButtons_ItemTemplate;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.ItemsSource":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "ItemsSource", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_224_RadioButtons_ItemsSource;
                xamlMember.Setter = set_224_RadioButtons_ItemsSource;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.MaxColumns":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "MaxColumns", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_225_RadioButtons_MaxColumns;
                xamlMember.Setter = set_225_RadioButtons_MaxColumns;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.SelectedIndex":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SelectedIndex", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_226_RadioButtons_SelectedIndex;
                xamlMember.Setter = set_226_RadioButtons_SelectedIndex;
                break;
            case "Microsoft.UI.Xaml.Controls.RadioButtons.SelectedItem":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.RadioButtons");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "SelectedItem", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_227_RadioButtons_SelectedItem;
                xamlMember.Setter = set_227_RadioButtons_SelectedItem;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Children":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Children", "System.Collections.Generic.IList`1<Microsoft.UI.Xaml.Controls.TreeViewNode>");
                xamlMember.Getter = get_228_TreeViewNode_Children;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Content":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Content", "Object");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_229_TreeViewNode_Content;
                xamlMember.Setter = set_229_TreeViewNode_Content;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Depth":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Depth", "Int32");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_230_TreeViewNode_Depth;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasChildren":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HasChildren", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_231_TreeViewNode_HasChildren;
                xamlMember.SetIsReadOnly();
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.HasUnrealizedChildren":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "HasUnrealizedChildren", "Boolean");
                xamlMember.Getter = get_232_TreeViewNode_HasUnrealizedChildren;
                xamlMember.Setter = set_232_TreeViewNode_HasUnrealizedChildren;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.IsExpanded":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "IsExpanded", "Boolean");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_233_TreeViewNode_IsExpanded;
                xamlMember.Setter = set_233_TreeViewNode_IsExpanded;
                break;
            case "Microsoft.UI.Xaml.Controls.TreeViewNode.Parent":
                userType = (global::GMTool.GMTool_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember = new global::GMTool.GMTool_XamlTypeInfo.XamlMember(this, "Parent", "Microsoft.UI.Xaml.Controls.TreeViewNode");
                xamlMember.Getter = get_234_TreeViewNode_Parent;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);
    internal delegate object CreateFromStringMethod(string args);
    internal delegate object BoxInstanceMethod(object instance);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::GMTool.GMTool_XamlTypeInfo.XamlSystemBaseType
        , global::Microsoft.UI.Xaml.Markup.IXamlType
    {
        global::GMTool.GMTool_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Microsoft.UI.Xaml.Markup.IXamlType _baseType;
        global::Microsoft.UI.Xaml.Markup.IXamlType _boxedType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::GMTool.GMTool_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Microsoft.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Microsoft.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }
        override public global::Microsoft.UI.Xaml.Markup.IXamlType BoxedType { get { return _boxedType; } }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Microsoft.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            global::System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (BoxedType != null)
            {
                return BoxInstance(BoxedType.CreateFromString(input));
            }

            if (CreateFromStringMethod != null)
            {
                return this.CreateFromStringMethod(input);
            }
            else if (_enumValues != null)
            {
                long value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    long enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt64(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt64(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(this.UnderlyingType));
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }
        public CreateFromStringMethod CreateFromStringMethod {get; set; }
        public BoxInstanceMethod BoxInstance {get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void SetBoxedType(global::Microsoft.UI.Xaml.Markup.IXamlType boxedType)
        {
            _boxedType = boxedType;
        }

        public object BoxType<T>(object instance) where T: struct
        {
            T unwrapped = (T)instance;
            return new global::System.Nullable<T>(unwrapped);
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.UI.Xaml.Markup.Compiler"," 3.0.0.2312")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Microsoft.UI.Xaml.Markup.IXamlMember
    {
        global::GMTool.GMTool_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::GMTool.GMTool_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Microsoft.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Microsoft.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

